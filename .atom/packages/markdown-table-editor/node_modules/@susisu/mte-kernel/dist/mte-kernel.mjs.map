{"version":3,"file":"mte-kernel.mjs","sources":["../lib/point.js","../lib/range.js","../lib/focus.js","../lib/alignment.js","../lib/table-cell.js","../lib/table-row.js","../lib/table.js","../lib/parser.js","../lib/formatter.js","../lib/edit-script.js","../lib/text-editor.js","../lib/options.js","../lib/table-editor.js"],"sourcesContent":["/**\n * A `Point` represents a point in the text editor.\n */\nexport class Point {\n  /**\n   * Creates a new `Point` object.\n   *\n   * @param {number} row - Row of the point, starts from 0.\n   * @param {number} column - Column of the point, starts from 0.\n   */\n  constructor(row, column) {\n    /** @private */\n    this._row = row;\n    /** @private */\n    this._column = column;\n  }\n\n  /**\n   * Row of the point.\n   *\n   * @type {number}\n   */\n  get row() {\n    return this._row;\n  }\n\n  /**\n   * Column of the point.\n   *\n   * @type {number}\n   */\n  get column() {\n    return this._column;\n  }\n\n  /**\n   * Checks if the point is equal to another point.\n   *\n   * @param {Point} point - A point object.\n   * @returns {boolean} `true` if two points are equal.\n   */\n  equals(point) {\n    return this.row === point.row && this.column === point.column;\n  }\n}\n","/**\n * A `Range` object represents a range in the text editor.\n */\nexport class Range {\n  /**\n   * Creates a new `Range` object.\n   *\n   * @param {Point} start - The start point of the range.\n   * @param {Point} end - The end point of the range.\n   */\n  constructor(start, end) {\n    /** @private */\n    this._start = start;\n    /** @private */\n    this._end = end;\n  }\n\n  /**\n   * The start point of the range.\n   *\n   * @type {Point}\n   */\n  get start() {\n    return this._start;\n  }\n\n  /**\n   * The end point of the range.\n   *\n   * @type {Point}\n   */\n  get end() {\n    return this._end;\n  }\n}\n","/**\n * A `Focus` object represents which cell is focused in the table.\n *\n * Note that `row` and `column` properties specifiy a cell's position in the table, not the cursor's\n * position in the text editor as {@link Point} class.\n *\n * @private\n */\nexport class Focus {\n  /**\n   * Creates a new `Focus` object.\n   *\n   * @param {number} row - Row of the focused cell.\n   * @param {number} column - Column of the focused cell.\n   * @param {number} offset - Raw offset in the cell.\n   */\n  constructor(row, column, offset) {\n    /** @private */\n    this._row = row;\n    /** @private */\n    this._column = column;\n    /** @private */\n    this._offset = offset;\n  }\n\n  /**\n   * Row of the focused cell.\n   *\n   * @type {number}\n   */\n  get row() {\n    return this._row;\n  }\n\n  /**\n   * Column of the focused cell.\n   *\n   * @type {number}\n   */\n  get column() {\n    return this._column;\n  }\n\n  /**\n   * Raw offset in the cell.\n   *\n   * @type {number}\n   */\n  get offset() {\n    return this._offset;\n  }\n\n  /**\n   * Checks if two focuses point the same cell.\n   * Offsets are ignored.\n   *\n   * @param {Focus} focus - A focus object.\n   * @returns {boolean}\n   */\n  posEquals(focus) {\n    return this.row === focus.row && this.column === focus.column;\n  }\n\n  /**\n   * Creates a copy of the focus object by setting its row to the specified value.\n   *\n   * @param {number} row - Row of the focused cell.\n   * @returns {Focus} A new focus object with the specified row.\n   */\n  setRow(row) {\n    return new Focus(row, this.column, this.offset);\n  }\n\n  /**\n   * Creates a copy of the focus object by setting its column to the specified value.\n   *\n   * @param {number} column - Column of the focused cell.\n   * @returns {Focus} A new focus object with the specified column.\n   */\n  setColumn(column) {\n    return new Focus(this.row, column, this.offset);\n  }\n\n  /**\n   * Creates a copy of the focus object by setting its offset to the specified value.\n   *\n   * @param {number} offset - Offset in the focused cell.\n   * @returns {Focus} A new focus object with the specified offset.\n   */\n  setOffset(offset) {\n    return new Focus(this.row, this.column, offset);\n  }\n}\n","/**\n * Represents column alignment.\n *\n * - `Alignment.NONE` - Use default alignment.\n * - `Alignment.LEFT` - Align left.\n * - `Alignment.RIGHT` - Align right.\n * - `Alignment.CENTER` - Align center.\n *\n * @type {Object}\n */\nexport const Alignment = Object.freeze({\n  NONE  : \"none\",\n  LEFT  : \"left\",\n  RIGHT : \"right\",\n  CENTER: \"center\"\n});\n\n/**\n * Represents default column alignment\n *\n * - `DefaultAlignment.LEFT` - Align left.\n * - `DefaultAlignment.RIGHT` - Align right.\n * - `DefaultAlignment.CENTER` - Align center.\n *\n * @type {Object}\n */\nexport const DefaultAlignment = Object.freeze({\n  LEFT  : Alignment.LEFT,\n  RIGHT : Alignment.RIGHT,\n  CENTER: Alignment.CENTER\n});\n\n/**\n * Represents alignment of header cells.\n *\n * - `HeaderAlignment.FOLLOW` - Follow column's alignment.\n * - `HeaderAlignment.LEFT` - Align left.\n * - `HeaderAlignment.RIGHT` - Align right.\n * - `HeaderAlignment.CENTER` - Align center.\n *\n * @type {Object}\n */\nexport const HeaderAlignment = Object.freeze({\n  FOLLOW: \"follow\",\n  LEFT  : Alignment.LEFT,\n  RIGHT : Alignment.RIGHT,\n  CENTER: Alignment.CENTER\n});\n","import { Alignment } from \"./alignment.js\";\n\n/**\n * A `TableCell` object represents a table cell.\n *\n * @private\n */\nexport class TableCell {\n  /**\n   * Creates a new `TableCell` object.\n   *\n   * @param {string} rawContent - Raw content of the cell.\n   */\n  constructor(rawContent) {\n    /** @private */\n    this._rawContent = rawContent;\n    /** @private */\n    this._content = rawContent.trim();\n    /** @private */\n    this._paddingLeft = this._content === \"\"\n      ? (this._rawContent === \"\" ? 0 : 1)\n      : this._rawContent.length - this._rawContent.trimLeft().length;\n    /** @private */\n    this._paddingRight = this._rawContent.length - this._content.length - this._paddingLeft;\n  }\n\n  /**\n   * Raw content of the cell.\n   *\n   * @type {string}\n   */\n  get rawContent() {\n    return this._rawContent;\n  }\n\n  /**\n   * Trimmed content of the cell.\n   *\n   * @type {string}\n   */\n  get content() {\n    return this._content;\n  }\n\n  /**\n   * Width of the left padding of the cell.\n   *\n   * @type {number}\n   */\n  get paddingLeft() {\n    return this._paddingLeft;\n  }\n\n  /**\n   * Width of the right padding of the cell.\n   *\n   * @type {number}\n   */\n  get paddingRight() {\n    return this._paddingRight;\n  }\n\n  /**\n   * Convers the cell to a text representation.\n   *\n   * @returns {string} The raw content of the cell.\n   */\n  toText() {\n    return this.rawContent;\n  }\n\n  /**\n   * Checks if the cell is a delimiter i.e. it only contains hyphens `-` with optional one\n   * leading and trailing colons `:`.\n   *\n   * @returns {boolean} `true` if the cell is a delimiter.\n   */\n  isDelimiter() {\n    return /^\\s*:?-+:?\\s*$/.test(this.rawContent);\n  }\n\n  /**\n   * Returns the alignment the cell represents.\n   *\n   * @returns {Alignment|undefined} The alignment the cell represents;\n   * `undefined` if the cell is not a delimiter.\n   */\n  getAlignment() {\n    if (!this.isDelimiter()) {\n      return undefined;\n    }\n    if (this.content[0] === \":\") {\n      if (this.content[this.content.length - 1] === \":\") {\n        return Alignment.CENTER;\n      }\n      else {\n        return Alignment.LEFT;\n      }\n    }\n    else {\n      if (this.content[this.content.length - 1] === \":\") {\n        return Alignment.RIGHT;\n      }\n      else {\n        return Alignment.NONE;\n      }\n    }\n  }\n\n  /**\n   * Computes a relative position in the trimmed content from that in the raw content.\n   *\n   * @param {number} rawOffset - Relative position in the raw content.\n   * @returns {number} - Relative position in the trimmed content.\n   */\n  computeContentOffset(rawOffset) {\n    if (this.content === \"\") {\n      return 0;\n    }\n    if (rawOffset < this.paddingLeft) {\n      return 0;\n    }\n    if (rawOffset < this.paddingLeft + this.content.length) {\n      return rawOffset - this.paddingLeft;\n    }\n    else {\n      return this.content.length;\n    }\n  }\n\n  /**\n   * Computes a relative position in the raw content from that in the trimmed content.\n   *\n   * @param {number} contentOffset - Relative position in the trimmed content.\n   * @returns {number} - Relative position in the raw content.\n   */\n  computeRawOffset(contentOffset) {\n    return contentOffset + this.paddingLeft;\n  }\n}\n","/**\n * A `TableRow` object represents a table row.\n *\n * @private\n */\nexport class TableRow {\n  /**\n   * Creates a new `TableRow` objec.\n   *\n   * @param {Array<TableCell>} cells - Cells that the row contains.\n   * @param {string} marginLeft - Margin string at the left of the row.\n   * @param {string} marginRight - Margin string at the right of the row.\n   */\n  constructor(cells, marginLeft, marginRight) {\n    /** @private */\n    this._cells = cells.slice();\n    /** @private */\n    this._marginLeft = marginLeft;\n    /** @private */\n    this._marginRight = marginRight;\n  }\n\n  /**\n   * Margin string at the left of the row.\n   *\n   * @type {string}\n   */\n  get marginLeft() {\n    return this._marginLeft;\n  }\n\n  /**\n   * Margin string at the right of the row.\n   *\n   * @type {string}\n   */\n  get marginRight() {\n    return this._marginRight;\n  }\n\n  /**\n   * Gets the number of the cells in the row.\n   *\n   * @returns {number} Number of the cells.\n   */\n  getWidth() {\n    return this._cells.length;\n  }\n\n  /**\n   * Returns the cells that the row contains.\n   *\n   * @returns {Array<TableCell>} An array of cells that the row contains.\n   */\n  getCells() {\n    return this._cells.slice();\n  }\n\n  /**\n   * Gets a cell at the specified index.\n   *\n   * @param {number} index - Index.\n   * @returns {TableCell|undefined} The cell at the specified index if exists;\n   * `undefined` if no cell is found.\n   */\n  getCellAt(index) {\n    return this._cells[index];\n  }\n\n  /**\n   * Convers the row to a text representation.\n   *\n   * @returns {string} A text representation of the row.\n   */\n  toText() {\n    if (this._cells.length === 0) {\n      return this.marginLeft;\n    }\n    else {\n      const cells = this._cells.map(cell => cell.toText()).join(\"|\");\n      return `${this.marginLeft}|${cells}|${this.marginRight}`;\n    }\n  }\n\n  /**\n   * Checks if the row is a delimiter or not.\n   *\n   * @returns {boolean} `true` if the row is a delimiter i.e. all the cells contained are delimiters.\n   */\n  isDelimiter() {\n    return this._cells.every(cell => cell.isDelimiter());\n  }\n}\n","import { Point } from \"./point.js\";\nimport { Range } from \"./range.js\";\nimport { Focus } from \"./focus.js\";\n\n/**\n * A `Table` object represents a table.\n *\n * @private\n */\nexport class Table {\n  /**\n   * Creates a new `Table` object.\n   *\n   * @param {Array<TableRow>} rows - An array of rows that the table contains.\n   */\n  constructor(rows) {\n    /** @private */\n    this._rows = rows.slice();\n  }\n\n  /**\n   * Gets the number of rows in the table.\n   *\n   * @returns {number} The number of rows.\n   */\n  getHeight() {\n    return this._rows.length;\n  }\n\n  /**\n   * Gets the maximum width of the rows in the table.\n   *\n   * @returns {number} The maximum width of the rows.\n   */\n  getWidth() {\n    return this._rows.map(row => row.getWidth())\n      .reduce((x, y) => Math.max(x, y), 0);\n  }\n\n  /**\n   * Gets the width of the header row.\n   *\n   * @returns {number|undefined} The width of the header row;\n   * `undefined` if there is no header row.\n   */\n  getHeaderWidth() {\n    if (this._rows.length === 0) {\n      return undefined;\n    }\n    return this._rows[0].getWidth();\n  }\n\n  /**\n   * Gets the rows that the table contains.\n   *\n   * @returns {Array<TableRow>} An array of the rows.\n   */\n  getRows() {\n    return this._rows.slice();\n  }\n\n  /**\n   * Gets a row at the specified index.\n   *\n   * @param {number} index - Row index.\n   * @returns {TableRow|undefined} The row at the specified index;\n   * `undefined` if not found.\n   */\n  getRowAt(index) {\n    return this._rows[index];\n  }\n\n  /**\n   * Gets the delimiter row of the table.\n   *\n   * @returns {TableRow|undefined} The delimiter row;\n   * `undefined` if there is not delimiter row.\n   */\n  getDelimiterRow() {\n    const row = this._rows[1];\n    if (row === undefined) {\n      return undefined;\n    }\n    if (row.isDelimiter()) {\n      return row;\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Gets a cell at the specified index.\n   *\n   * @param {number} rowIndex - Row index of the cell.\n   * @param {number} columnIndex - Column index of the cell.\n   * @returns {TableCell|undefined} The cell at the specified index;\n   * `undefined` if not found.\n   */\n  getCellAt(rowIndex, columnIndex) {\n    const row = this._rows[rowIndex];\n    if (row === undefined) {\n      return undefined;\n    }\n    return row.getCellAt(columnIndex);\n  }\n\n  /**\n   * Gets the cell at the focus.\n   *\n   * @param {Focus} focus - Focus object.\n   * @returns {TableCell|undefined} The cell at the focus;\n   * `undefined` if not found.\n   */\n  getFocusedCell(focus) {\n    return this.getCellAt(focus.row, focus.column);\n  }\n\n  /**\n   * Converts the table to an array of text representations of the rows.\n   *\n   * @returns {Array<string>} An array of text representations of the rows.\n   */\n  toLines() {\n    return this._rows.map(row => row.toText());\n  }\n\n  /**\n   * Computes a focus from a point in the text editor.\n   *\n   * @param {Point} pos - A point in the text editor.\n   * @param {number} rowOffset - The row index where the table starts in the text editor.\n   * @returns {Focus|undefined} A focus object that corresponds to the specified point;\n   * `undefined` if the row index is out of bounds.\n   */\n  focusOfPosition(pos, rowOffset) {\n    const rowIndex = pos.row - rowOffset;\n    const row = this._rows[rowIndex];\n    if (row === undefined) {\n      return undefined;\n    }\n    if (pos.column < row.marginLeft.length + 1) {\n      return new Focus(rowIndex, -1, pos.column);\n    }\n    else {\n      const cellWidths = row.getCells().map(cell => cell.rawContent.length);\n      let columnPos = row.marginLeft.length + 1; // left margin + a pipe\n      let columnIndex = 0;\n      for (; columnIndex < cellWidths.length; columnIndex++) {\n        if (columnPos + cellWidths[columnIndex] + 1 > pos.column) {\n          break;\n        }\n        columnPos += cellWidths[columnIndex] + 1;\n      }\n      const offset = pos.column - columnPos;\n      return new Focus(rowIndex, columnIndex, offset);\n    }\n  }\n\n  /**\n   * Computes a position in the text editor from a focus.\n   *\n   * @param {Focus} focus - A focus object.\n   * @param {number} rowOffset - The row index where the table starts in the text editor.\n   * @returns {Point|undefined} A position in the text editor that corresponds to the focus;\n   * `undefined` if the focused row  is out of the table.\n   */\n  positionOfFocus(focus, rowOffset) {\n    const row = this._rows[focus.row];\n    if (row === undefined) {\n      return undefined;\n    }\n    const rowPos = focus.row + rowOffset;\n    if (focus.column < 0) {\n      return new Point(rowPos, focus.offset);\n    }\n    const cellWidths = row.getCells().map(cell => cell.rawContent.length);\n    const maxIndex = Math.min(focus.column, cellWidths.length);\n    let columnPos = row.marginLeft.length + 1;\n    for (let columnIndex = 0; columnIndex < maxIndex; columnIndex++) {\n      columnPos += cellWidths[columnIndex] + 1;\n    }\n    return new Point(rowPos, columnPos + focus.offset);\n  }\n\n  /**\n   * Computes a selection range from a focus.\n   *\n   * @param {Focus} focus - A focus object.\n   * @param {number} rowOffset - The row index where the table starts in the text editor.\n   * @returns {Range|undefined} A range to be selected that corresponds to the focus;\n   * `undefined` if the focus does not specify any cell or the specified cell is empty.\n   */\n  selectionRangeOfFocus(focus, rowOffset) {\n    const row = this._rows[focus.row];\n    if (row === undefined) {\n      return undefined;\n    }\n    const cell = row.getCellAt(focus.column);\n    if (cell === undefined) {\n      return undefined;\n    }\n    if (cell.content === \"\") {\n      return undefined;\n    }\n    const rowPos = focus.row + rowOffset;\n    const cellWidths = row.getCells().map(cell => cell.rawContent.length);\n    let columnPos = row.marginLeft.length + 1;\n    for (let columnIndex = 0; columnIndex < focus.column; columnIndex++) {\n      columnPos += cellWidths[columnIndex] + 1;\n    }\n    columnPos += cell.paddingLeft;\n    return new Range(\n      new Point(rowPos, columnPos),\n      new Point(rowPos, columnPos + cell.content.length)\n    );\n  }\n}\n","import { TableCell } from \"./table-cell.js\";\nimport { TableRow } from \"./table-row.js\";\nimport { Table } from \"./table.js\";\n\n/**\n * Splits a text into cells.\n *\n * @private\n * @param {string} text\n * @returns {Array<string>}\n */\nexport function _splitCells(text) {\n  const cells = [];\n  let buf = \"\";\n  let rest = text;\n  while (rest !== \"\") {\n    switch (rest[0]) {\n    case \"`\":\n      // read code span\n      {\n        const start = rest.match(/^`*/)[0];\n        let buf1 = start;\n        let rest1 = rest.substr(start.length);\n        let closed = false;\n        while (rest1 !== \"\") {\n          if (rest1[0] === \"`\") {\n            const end = rest1.match(/^`*/)[0];\n            buf1 += end;\n            rest1 = rest1.substr(end.length);\n            if (end.length === start.length) {\n              closed = true;\n              break;\n            }\n          }\n          else {\n            buf1 += rest1[0];\n            rest1 = rest1.substr(1);\n          }\n        }\n        if (closed) {\n          buf += buf1;\n          rest = rest1;\n        }\n        else {\n          buf += \"`\";\n          rest = rest.substr(1);\n        }\n      }\n      break;\n    case \"\\\\\":\n      // escape next character\n      if (rest.length >= 2) {\n        buf += rest.substr(0, 2);\n        rest = rest.substr(2);\n      }\n      else {\n        buf += \"\\\\\";\n        rest = rest.substr(1);\n      }\n      break;\n    case \"|\":\n      // flush buffer\n      cells.push(buf);\n      buf = \"\";\n      rest = rest.substr(1);\n      break;\n    default:\n      buf += rest[0];\n      rest = rest.substr(1);\n    }\n  }\n  cells.push(buf);\n  return cells;\n}\n\n/**\n * Reads a table row.\n *\n * @private\n * @param {string} text - A text.\n * @param {RegExp} [leftMarginRegex=/^\\s*$/] - A regular expression object that matches left margin.\n * @returns {TableRow}\n */\nexport function _readRow(text, leftMarginRegex = /^\\s*$/) {\n  let cells = _splitCells(text);\n  let marginLeft;\n  if (cells.length > 0 && leftMarginRegex.test(cells[0])) {\n    marginLeft = cells[0];\n    cells = cells.slice(1);\n  }\n  else {\n    marginLeft = \"\";\n  }\n  let marginRight;\n  if (cells.length > 1 && /^\\s*$/.test(cells[cells.length - 1])) {\n    marginRight = cells[cells.length - 1];\n    cells = cells.slice(0, cells.length - 1);\n  }\n  else {\n    marginRight = \"\";\n  }\n  return new TableRow(cells.map(cell => new TableCell(cell)), marginLeft, marginRight);\n}\n\n/**\n * Creates a regex source string of margin character class.\n *\n * @private\n * @param {Set<string>} chars - A set of additional margin characters.\n * A pipe `|`, a backslash `\\`, and a backquote will be ignored.\n * @return {string} A regex source string.\n */\nexport function marginRegexSrc(chars) {\n  let cs = \"\";\n  for (const c of chars) {\n    if (c !== \"|\" && c !== \"\\\\\" && c !== \"`\") {\n      cs += `\\\\u{${c.codePointAt(0).toString(16)}}`;\n    }\n  }\n  return `[\\\\s${cs}]*`;\n}\n\n/**\n * Creates a regular expression object that matches margin of tables.\n *\n * @private\n * @param {Set<string>} chars - A set of additional margin characters.\n * A pipe `|`, a backslash `\\`, and a backquote will be ignored.\n * @return {RegExp} An regular expression object that matches margin of tables.\n */\nexport function _marginRegex(chars) {\n  return new RegExp(`^${marginRegexSrc(chars)}$`, \"u\");\n}\n\n/**\n * Reads a table from lines.\n *\n * @private\n * @param {Array<string>} lines - An array of texts, each text represents a row.\n * @param {Object} options - An object containing options for parsing.\n *\n * | property name     | type                              | description                                 |\n * | ----------------- | --------------------------------- | ------------------------------------------- |\n * | `leftMarginChars` | {@link Set}&lt;{@link string}&gt; | A set of additional left margin characters. |\n *\n * @returns {Table} The table red from the lines.\n */\nexport function readTable(lines, options) {\n  const leftMarginRegex = _marginRegex(options.leftMarginChars);\n  return new Table(lines.map(line => _readRow(line, leftMarginRegex)));\n}\n","import { getEAW } from \"meaw\";\n\nimport { Alignment, HeaderAlignment } from \"./alignment.js\";\nimport { TableCell } from \"./table-cell.js\";\nimport { TableRow } from \"./table-row.js\";\nimport { Table } from \"./table.js\";\n\n/**\n * Creates a delimiter text.\n *\n * @private\n * @param {Alignment} alignment\n * @param {number} width - Width of the horizontal bar of delimiter.\n * @returns {string}\n * @throws {Error} Unknown alignment.\n */\nexport function _delimiterText(alignment, width) {\n  const bar = \"-\".repeat(width);\n  switch (alignment) {\n  case Alignment.NONE:\n    return ` ${bar} `;\n  case Alignment.LEFT:\n    return `:${bar} `;\n  case Alignment.RIGHT:\n    return ` ${bar}:`;\n  case Alignment.CENTER:\n    return `:${bar}:`;\n  default:\n    throw new Error(\"Unknown alignment: \" + alignment);\n  }\n}\n\n/**\n * Extends array size.\n *\n * @private\n * @param {Array} arr\n * @param {number} size\n * @param {Function} callback - Callback function to fill newly created cells.\n * @returns {Array} Extended array.\n */\nexport function _extendArray(arr, size, callback) {\n  const extended = arr.slice();\n  for (let i = arr.length; i < size; i++) {\n    extended.push(callback(i, arr));\n  }\n  return extended;\n}\n\n/**\n * Completes a table by adding missing delimiter and cells.\n * After completion, all rows in the table have the same width.\n *\n * @private\n * @param {Table} table - A table object.\n * @param {Object} options - An object containing options for completion.\n *\n * | property name       | type           | description                                               |\n * | ------------------- | -------------- | --------------------------------------------------------- |\n * | `minDelimiterWidth` | {@link number} | Width of delimiters used when completing delimiter cells. |\n *\n * @returns {Object} An object that represents the result of the completion.\n *\n * | property name       | type            | description                            |\n * | ------------------- | --------------- | -------------------------------------- |\n * | `table`             | {@link Table}   | A completed table object.              |\n * | `delimiterInserted` | {@link boolean} | `true` if a delimiter row is inserted. |\n *\n * @throws {Error} Empty table.\n */\nexport function completeTable(table, options) {\n  const tableHeight = table.getHeight();\n  const tableWidth = table.getWidth();\n  if (tableHeight === 0) {\n    throw new Error(\"Empty table\");\n  }\n  const rows = table.getRows();\n  const newRows = [];\n  // header\n  const headerRow = rows[0];\n  const headerCells = headerRow.getCells();\n  newRows.push(new TableRow(\n    _extendArray(headerCells, tableWidth, j => new TableCell(\n      j === headerCells.length ? headerRow.marginRight : \"\"\n    )),\n    headerRow.marginLeft,\n    headerCells.length < tableWidth ? \"\" : headerRow.marginRight\n  ));\n  // delimiter\n  const delimiterRow = table.getDelimiterRow();\n  if (delimiterRow !== undefined) {\n    const delimiterCells = delimiterRow.getCells();\n    newRows.push(new TableRow(\n      _extendArray(delimiterCells, tableWidth, j => new TableCell(\n        _delimiterText(\n          Alignment.NONE,\n          j === delimiterCells.length\n            ? Math.max(options.minDelimiterWidth, delimiterRow.marginRight.length - 2)\n            : options.minDelimiterWidth\n        )\n      )),\n      delimiterRow.marginLeft,\n      delimiterCells.length < tableWidth ? \"\" : delimiterRow.marginRight\n    ));\n  }\n  else {\n    newRows.push(new TableRow(\n      _extendArray([], tableWidth, () => new TableCell(\n        _delimiterText(Alignment.NONE, options.minDelimiterWidth)\n      )),\n      \"\",\n      \"\"\n    ));\n  }\n  // body\n  for (let i = delimiterRow !== undefined ? 2 : 1; i < tableHeight; i++) {\n    const row = rows[i];\n    const cells = row.getCells();\n    newRows.push(new TableRow(\n      _extendArray(cells, tableWidth, j => new TableCell(\n        j === cells.length ? row.marginRight : \"\"\n      )),\n      row.marginLeft,\n      cells.length < tableWidth ? \"\" : row.marginRight\n    ));\n  }\n  return {\n    table            : new Table(newRows),\n    delimiterInserted: delimiterRow === undefined\n  };\n}\n\n/**\n * Calculates the width of a text based on characters' EAW properties.\n *\n * @private\n * @param {string} text\n * @param {Object} options -\n *\n * | property name     | type                               |\n * | ----------------- | ---------------------------------- |\n * | `normalize`       | {@link boolean}                    |\n * | `wideChars`       | {@link Set}&lt;{@link string} &gt; |\n * | `narrowChars`     | {@link Set}&lt;{@link string} &gt; |\n * | `ambiguousAsWide` | {@link boolean}                    |\n *\n * @returns {number} Calculated width of the text.\n */\nexport function _computeTextWidth(text, options) {\n  const normalized = options.normalize ? text.normalize(\"NFC\") : text;\n  let w = 0;\n  for (const char of normalized) {\n    if (options.wideChars.has(char)) {\n      w += 2;\n      continue;\n    }\n    if (options.narrowChars.has(char)) {\n      w += 1;\n      continue;\n    }\n    switch (getEAW(char)) {\n    case \"F\":\n    case \"W\":\n      w += 2;\n      break;\n    case \"A\":\n      w += options.ambiguousAsWide ? 2 : 1;\n      break;\n    default:\n      w += 1;\n    }\n  }\n  return w;\n}\n\n/**\n * Returns a aligned cell content.\n *\n * @private\n * @param {string} text\n * @param {number} width\n * @param {Alignment} alignment\n * @param {Object} options - Options for computing text width.\n * @returns {string}\n * @throws {Error} Unknown alignment.\n * @throws {Error} Unexpected default alignment.\n */\nexport function _alignText(text, width, alignment, options) {\n  const space = width - _computeTextWidth(text, options);\n  if (space < 0) {\n    return text;\n  }\n  switch (alignment) {\n  case Alignment.NONE:\n    throw new Error(\"Unexpected default alignment\");\n  case Alignment.LEFT:\n    return text + \" \".repeat(space);\n  case Alignment.RIGHT:\n    return \" \".repeat(space) + text;\n  case Alignment.CENTER:\n    return \" \".repeat(Math.floor(space / 2))\n      + text\n      + \" \".repeat(Math.ceil(space / 2));\n  default:\n    throw new Error(\"Unknown alignment: \" + alignment);\n  }\n}\n\n/**\n * Just adds one space paddings to both sides of a text.\n *\n * @private\n * @param {string} text\n * @returns {string}\n */\nexport function _padText(text) {\n  return ` ${text} `;\n}\n\n/**\n * Formats a table.\n *\n * @private\n * @param {Table} table - A table object.\n * @param {Object} options - An object containing options for formatting.\n *\n * | property name       | type                     | description                                             |\n * | ------------------- | ------------------------ | ------------------------------------------------------- |\n * | `minDelimiterWidth` | {@link number}           | Minimum width of delimiters.                            |\n * | `defaultAlignment`  | {@link DefaultAlignment} | Default alignment of columns.                           |\n * | `headerAlignment`   | {@link HeaderAlignment}  | Alignment of header cells.                              |\n * | `textWidthOptions`  | {@link Object}           | An object containing options for computing text widths. |\n *\n * `options.textWidthOptions` must contain the following options.\n *\n * | property name     | type                              | description                                         |\n * | ----------------- | --------------------------------- | --------------------------------------------------- |\n * | `normalize`       | {@link boolean}                   | Normalize texts before computing text widths.       |\n * | `wideChars`       | {@link Set}&lt;{@link string}&gt; | Set of characters that should be treated as wide.   |\n * | `narrowChars`     | {@link Set}&lt;{@link string}&gt; | Set of characters that should be treated as narrow. |\n * | `ambiguousAsWide` | {@link boolean}                   | Treat East Asian Ambiguous characters as wide.      |\n *\n * @returns {Object} An object that represents the result of formatting.\n *\n * | property name   | type           | description                                    |\n * | --------------- | -------------- | ---------------------------------------------- |\n * | `table`         | {@link Table}  | A formatted table object.                      |\n * | `marginLeft`    | {@link string} | The common left margin of the formatted table. |\n */\nexport function _formatTable(table, options) {\n  const tableHeight = table.getHeight();\n  const tableWidth = table.getWidth();\n  if (tableHeight === 0) {\n    return {\n      table,\n      marginLeft: \"\"\n    };\n  }\n  const marginLeft = table.getRowAt(0).marginLeft;\n  if (tableWidth === 0) {\n    const rows = new Array(tableHeight).fill()\n      .map(() => new TableRow([], marginLeft, \"\"));\n    return {\n      table: new Table(rows),\n      marginLeft\n    };\n  }\n  // compute column widths\n  const delimiterRow = table.getDelimiterRow();\n  const columnWidths = new Array(tableWidth).fill(0);\n  if (delimiterRow !== undefined) {\n    const delimiterRowWidth = delimiterRow.getWidth();\n    for (let j = 0; j < delimiterRowWidth; j++) {\n      columnWidths[j] = options.minDelimiterWidth;\n    }\n  }\n  for (let i = 0; i < tableHeight; i++) {\n    if (delimiterRow !== undefined && i === 1) {\n      continue;\n    }\n    const row = table.getRowAt(i);\n    const rowWidth = row.getWidth();\n    for (let j = 0; j < rowWidth; j++) {\n      columnWidths[j] = Math.max(\n        columnWidths[j],\n        _computeTextWidth(row.getCellAt(j).content, options.textWidthOptions)\n      );\n    }\n  }\n  // get column alignments\n  const alignments = delimiterRow !== undefined\n    ? _extendArray(\n      delimiterRow.getCells().map(cell => cell.getAlignment()),\n      tableWidth,\n      () => options.defaultAlignment\n    )\n    : new Array(tableWidth).fill(options.defaultAlignment);\n  // format\n  const rows = [];\n  // header\n  const headerRow = table.getRowAt(0);\n  rows.push(new TableRow(\n    headerRow.getCells().map((cell, j) =>\n      new TableCell(_padText(_alignText(\n        cell.content,\n        columnWidths[j],\n        options.headerAlignment === HeaderAlignment.FOLLOW\n          ? (alignments[j] === Alignment.NONE ? options.defaultAlignment : alignments[j])\n          : options.headerAlignment,\n        options.textWidthOptions\n      )))\n    ),\n    marginLeft,\n    \"\"\n  ));\n  // delimiter\n  if (delimiterRow !== undefined) {\n    rows.push(new TableRow(\n      delimiterRow.getCells().map((cell, j) =>\n        new TableCell(_delimiterText(alignments[j], columnWidths[j]))\n      ),\n      marginLeft,\n      \"\"\n    ));\n  }\n  // body\n  for (let i = delimiterRow !== undefined ? 2 : 1; i < tableHeight; i++) {\n    const row = table.getRowAt(i);\n    rows.push(new TableRow(\n      row.getCells().map((cell, j) =>\n        new TableCell(_padText(_alignText(\n          cell.content,\n          columnWidths[j],\n          alignments[j] === Alignment.NONE ? options.defaultAlignment : alignments[j],\n          options.textWidthOptions\n        )))\n      ),\n      marginLeft,\n      \"\"\n    ));\n  }\n  return {\n    table: new Table(rows),\n    marginLeft\n  };\n}\n\n/**\n * Formats a table weakly.\n * Rows are formatted independently to each other, cell contents are just trimmed and not aligned.\n * This is useful when using a non-monospaced font or dealing with wide tables.\n *\n * @private\n * @param {Table} table - A table object.\n * @param {Object} options - An object containing options for formatting.\n * The function accepts the same option object for {@link formatTable}, but properties not listed\n * here are just ignored.\n *\n * | property name       | type           | description          |\n * | ------------------- | -------------- | -------------------- |\n * | `minDelimiterWidth` | {@link number} | Width of delimiters. |\n *\n * @returns {Object} An object that represents the result of formatting.\n *\n * | property name   | type           | description                                    |\n * | --------------- | -------------- | ---------------------------------------------- |\n * | `table`         | {@link Table}  | A formatted table object.                      |\n * | `marginLeft`    | {@link string} | The common left margin of the formatted table. |\n */\nexport function _weakFormatTable(table, options) {\n  const tableHeight = table.getHeight();\n  const tableWidth = table.getWidth();\n  if (tableHeight === 0) {\n    return {\n      table,\n      marginLeft: \"\"\n    };\n  }\n  const marginLeft = table.getRowAt(0).marginLeft;\n  if (tableWidth === 0) {\n    const rows = new Array(tableHeight).fill()\n      .map(() => new TableRow([], marginLeft, \"\"));\n    return {\n      table: new Table(rows),\n      marginLeft\n    };\n  }\n  const delimiterRow = table.getDelimiterRow();\n  // format\n  const rows = [];\n  // header\n  const headerRow = table.getRowAt(0);\n  rows.push(new TableRow(\n    headerRow.getCells().map(cell =>\n      new TableCell(_padText(cell.content))\n    ),\n    marginLeft,\n    \"\"\n  ));\n  // delimiter\n  if (delimiterRow !== undefined) {\n    rows.push(new TableRow(\n      delimiterRow.getCells().map(cell =>\n        new TableCell(_delimiterText(cell.getAlignment(), options.minDelimiterWidth))\n      ),\n      marginLeft,\n      \"\"\n    ));\n  }\n  // body\n  for (let i = delimiterRow !== undefined ? 2 : 1; i < tableHeight; i++) {\n    const row = table.getRowAt(i);\n    rows.push(new TableRow(\n      row.getCells().map(cell =>\n        new TableCell(_padText(cell.content))\n      ),\n      marginLeft,\n      \"\"\n    ));\n  }\n  return {\n    table: new Table(rows),\n    marginLeft\n  };\n}\n\n/**\n * Represents table format type.\n *\n * - `FormatType.NORMAL` - Formats table normally.\n * - `FormatType.WEAK` - Formats table weakly, rows are formatted independently to each other, cell\n *   contents are just trimmed and not aligned.\n *\n * @type {Object}\n */\nexport const FormatType = Object.freeze({\n  NORMAL: \"normal\",\n  WEAK  : \"weak\"\n});\n\n\n/**\n * Formats a table.\n *\n * @private\n * @param {Table} table - A table object.\n * @param {Object} options - An object containing options for formatting.\n *\n * | property name       | type                     | description                                             |\n * | ------------------- | ------------------------ | ------------------------------------------------------- |\n * | `formatType`        | {@link FormatType}       | Format type, normal or weak.                            |\n * | `minDelimiterWidth` | {@link number}           | Minimum width of delimiters.                            |\n * | `defaultAlignment`  | {@link DefaultAlignment} | Default alignment of columns.                           |\n * | `headerAlignment`   | {@link HeaderAlignment}  | Alignment of header cells.                              |\n * | `textWidthOptions`  | {@link Object}           | An object containing options for computing text widths. |\n *\n * `options.textWidthOptions` must contain the following options.\n *\n * | property name     | type                              | description                                         |\n * | ----------------- | --------------------------------- | --------------------------------------------------- |\n * | `normalize`       | {@link boolean}                   | Normalize texts before computing text widths.       |\n * | `wideChars`       | {@link Set}&lt;{@link string}&gt; | Set of characters that should be treated as wide.   |\n * | `narrowChars`     | {@link Set}&lt;{@link string}&gt; | Set of characters that should be treated as narrow. |\n * | `ambiguousAsWide` | {@link boolean}                   | Treat East Asian Ambiguous characters as wide.      |\n *\n * @returns {Object} An object that represents the result of formatting.\n *\n * | property name   | type           | description                                    |\n * | --------------- | -------------- | ---------------------------------------------- |\n * | `table`         | {@link Table}  | A formatted table object.                      |\n * | `marginLeft`    | {@link string} | The common left margin of the formatted table. |\n *\n * @throws {Error} Unknown format type.\n */\nexport function formatTable(table, options) {\n  switch (options.formatType) {\n  case FormatType.NORMAL:\n    return _formatTable(table, options);\n  case FormatType.WEAK:\n    return _weakFormatTable(table, options);\n  default:\n    throw new Error(\"Unknown format type: \" + options.formatType);\n  }\n}\n\n/**\n * Alters a column's alignment of a table.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} columnIndex - An index of the column.\n * @param {Alignment} alignment - A new alignment of the column.\n * @param {Object} options - An object containing options for completion.\n *\n * | property name       | type           | description          |\n * | ------------------- | -------------- | -------------------- |\n * | `minDelimiterWidth` | {@link number} | Width of delimiters. |\n *\n * @returns {Table} An altered table object.\n * If the column index is out of range, returns the original table.\n */\nexport function alterAlignment(table, columnIndex, alignment, options) {\n  const delimiterRow = table.getRowAt(1);\n  if (columnIndex < 0 || delimiterRow.getWidth() - 1 < columnIndex) {\n    return table;\n  }\n  const delimiterCells = delimiterRow.getCells();\n  delimiterCells[columnIndex] = new TableCell(_delimiterText(alignment, options.minDelimiterWidth));\n  const rows = table.getRows();\n  rows[1] = new TableRow(delimiterCells, delimiterRow.marginLeft, delimiterRow.marginRight);\n  return new Table(rows);\n}\n\n/**\n * Inserts a row to a table.\n * The row is always inserted after the header and the delimiter rows, even if the index specifies\n * the header or the delimiter.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} rowIndex - An row index at which a new row will be inserted.\n * @param {TableRow} row - A table row to be inserted.\n * @returns {Table} An altered table obejct.\n */\nexport function insertRow(table, rowIndex, row) {\n  const rows = table.getRows();\n  rows.splice(Math.max(rowIndex, 2), 0, row);\n  return new Table(rows);\n}\n\n/**\n * Deletes a row in a table.\n * If the index specifies the header row, the cells are emptied but the row will not be removed.\n * If the index specifies the delimiter row, it does nothing.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} rowIndex - An index of the row to be deleted.\n * @returns {Table} An altered table obejct.\n */\nexport function deleteRow(table, rowIndex) {\n  if (rowIndex === 1) {\n    return table;\n  }\n  const rows = table.getRows();\n  if (rowIndex === 0) {\n    const headerRow = rows[0];\n    rows[0] = new TableRow(\n      new Array(headerRow.getWidth()).fill(new TableCell(\"\")),\n      headerRow.marginLeft,\n      headerRow.marginRight\n    );\n  }\n  else {\n    rows.splice(rowIndex, 1);\n  }\n  return new Table(rows);\n}\n\n/**\n * Moves a row at the index to the specified destination.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} rowIndex - Index of the row to be moved.\n * @param {number} destIndex - Index of the destination.\n * @returns {Table} An altered table object.\n */\nexport function moveRow(table, rowIndex, destIndex) {\n  if (rowIndex <= 1 || destIndex <= 1 || rowIndex === destIndex) {\n    return table;\n  }\n  const rows = table.getRows();\n  const row = rows[rowIndex];\n  rows.splice(rowIndex, 1);\n  rows.splice(destIndex, 0, row);\n  return new Table(rows);\n}\n\n/**\n * Inserts a column to a table.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} columnIndex - An column index at which the new column will be inserted.\n * @param {Array<TableCell>} column - An array of cells.\n * @param {Object} options - An object containing options for completion.\n *\n * | property name       | type           | description             |\n * | ------------------- | -------------- | ----------------------- |\n * | `minDelimiterWidth` | {@link number} | Width of the delimiter. |\n *\n * @returns {Table} An altered table obejct.\n */\nexport function insertColumn(table, columnIndex, column, options) {\n  const rows = table.getRows();\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const cells = rows[i].getCells();\n    const cell = i === 1\n      ? new TableCell(_delimiterText(Alignment.NONE, options.minDelimiterWidth))\n      : column[i > 1 ? i - 1 : i];\n    cells.splice(columnIndex, 0, cell);\n    rows[i] = new TableRow(cells, row.marginLeft, row.marginRight);\n  }\n  return new Table(rows);\n}\n\n/**\n * Deletes a column in a table.\n * If there will be no columns after the deletion, the cells are emptied but the column will not be\n * removed.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} columnIndex - An index of the column to be deleted.\n * @param {Object} options - An object containing options for completion.\n *\n * | property name       | type           | description             |\n * | ------------------- | -------------- | ----------------------- |\n * | `minDelimiterWidth` | {@link number} | Width of the delimiter. |\n *\n * @returns {Table} An altered table object.\n */\nexport function deleteColumn(table, columnIndex, options) {\n  const rows = table.getRows();\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    let cells = row.getCells();\n    if (cells.length <= 1) {\n      cells = [new TableCell(i === 1\n        ? _delimiterText(Alignment.NONE, options.minDelimiterWidth)\n        : \"\"\n      )];\n    }\n    else {\n      cells.splice(columnIndex, 1);\n    }\n    rows[i] = new TableRow(cells, row.marginLeft, row.marginRight);\n  }\n  return new Table(rows);\n}\n\n/**\n * Moves a column at the index to the specified destination.\n *\n * @private\n * @param {Table} table - A completed non-empty table.\n * @param {number} columnIndex - Index of the column to be moved.\n * @param {number} destIndex - Index of the destination.\n * @returns {Table} An altered table object.\n */\nexport function moveColumn(table, columnIndex, destIndex) {\n  if (columnIndex === destIndex) {\n    return table;\n  }\n  const rows = table.getRows();\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const cells = row.getCells();\n    const cell = cells[columnIndex];\n    cells.splice(columnIndex, 1);\n    cells.splice(destIndex, 0, cell);\n    rows[i] = new TableRow(cells, row.marginLeft, row.marginRight);\n  }\n  return new Table(rows);\n}\n","/**\n * The `Insert` class represents an insertion of a line.\n *\n * @private\n */\nexport class Insert {\n  /**\n   * Creats a new `Insert` object.\n   *\n   * @param {number} row - Row index, starts from `0`.\n   * @param {string} line - A string to be inserted at the row.\n   */\n  constructor(row, line) {\n    /** @private */\n    this._row = row;\n    /** @private */\n    this._line = line;\n  }\n\n  /**\n   * Row index, starts from `0`.\n   *\n   * @type {number}\n   */\n  get row() {\n    return this._row;\n  }\n\n  /**\n   * A string to be inserted.\n   *\n   * @type {string}\n   */\n  get line() {\n    return this._line;\n  }\n}\n\n/**\n * The `Delete` class represents a deletion of a line.\n *\n * @private\n */\nexport class Delete {\n  /**\n   * Creates a new `Delete` object.\n   *\n   * @param {number} row - Row index, starts from `0`.\n   */\n  constructor(row) {\n    /** @private */\n    this._row = row;\n  }\n\n  /**\n   * Row index, starts from `0`.\n   *\n   * @type {number}\n   */\n  get row() {\n    return this._row;\n  }\n}\n\n/**\n * Applies a command to the text editor.\n *\n * @private\n * @param {ITextEditor} textEditor - An interface to the text editor.\n * @param {Insert|Delete} command - A command.\n * @param {number} rowOffset - Offset to the row index of the command.\n * @returns {undefined}\n */\nexport function _applyCommand(textEditor, command, rowOffset) {\n  if (command instanceof Insert) {\n    textEditor.insertLine(rowOffset + command.row, command.line);\n  }\n  else if (command instanceof Delete) {\n    textEditor.deleteLine(rowOffset + command.row);\n  }\n  else {\n    throw new Error(\"Unknown command\");\n  }\n}\n\n/**\n * Apply an edit script (array of commands) to the text editor.\n *\n * @private\n * @param {ITextEditor} textEditor - An interface to the text editor.\n * @param {Array<Insert|Delete>} script - An array of commands.\n * The commands are applied sequentially in the order of the array.\n * @param {number} rowOffset - Offset to the row index of the commands.\n * @returns {undefined}\n */\nexport function applyEditScript(textEditor, script, rowOffset) {\n  for (const command of script) {\n    _applyCommand(textEditor, command, rowOffset);\n  }\n}\n\n\n/**\n * Linked list used to remember edit script.\n *\n * @private\n */\nclass IList {\n  get car() {\n    throw new Error(\"Not implemented\");\n  }\n\n  get cdr() {\n    throw new Error(\"Not implemented\");\n  }\n\n  isEmpty() {\n    throw new Error(\"Not implemented\");\n  }\n\n  unshift(value) {\n    return new Cons(value, this);\n  }\n\n  toArray() {\n    const arr = [];\n    let rest = this;\n    while (!rest.isEmpty()) {\n      arr.push(rest.car);\n      rest = rest.cdr;\n    }\n    return arr;\n  }\n}\n\n/**\n * @private\n */\nclass Nil extends IList {\n  constructor() {\n    super();\n  }\n\n  get car() {\n    throw new Error(\"Empty list\");\n  }\n\n  get cdr() {\n    throw new Error(\"Empty list\");\n  }\n\n  isEmpty() {\n    return true;\n  }\n}\n\n/**\n * @private\n */\nclass Cons extends IList {\n  constructor(car, cdr) {\n    super();\n    this._car = car;\n    this._cdr = cdr;\n  }\n\n  get car() {\n    return this._car;\n  }\n\n  get cdr() {\n    return this._cdr;\n  }\n\n  isEmpty() {\n    return false;\n  }\n}\n\nconst nil = new Nil();\n\n\n/**\n * Computes the shortest edit script between two arrays of strings.\n *\n * @private\n * @param {Array<string>} from - An array of string the edit starts from.\n * @param {Array<string>} to - An array of string the edit goes to.\n * @param {number} [limit=-1] - Upper limit of edit distance to be searched.\n * If negative, there is no limit.\n * @returns {Array<Insert|Delete>|undefined} The shortest edit script that turns `from` into `to`;\n * `undefined` if no edit script is found in the given range.\n */\nexport function shortestEditScript(from, to, limit = -1) {\n  const fromLen = from.length;\n  const toLen = to.length;\n  const maxd = limit >= 0 ? Math.min(limit, fromLen + toLen) : fromLen + toLen;\n  const mem = new Array(Math.min(maxd, fromLen) + Math.min(maxd, toLen) + 1);\n  const offset = Math.min(maxd, fromLen);\n  for (let d = 0; d <= maxd; d++) {\n    const mink = d <= fromLen ? -d :  d - 2 * fromLen;\n    const maxk = d <= toLen   ?  d : -d + 2 * toLen;\n    for (let k = mink; k <= maxk; k += 2) {\n      let i;\n      let script;\n      if (d === 0) {\n        i = 0;\n        script = nil;\n      }\n      else if (k === -d) {\n        i = mem[offset + k + 1].i + 1;\n        script = mem[offset + k + 1].script.unshift(new Delete(i + k));\n      }\n      else if (k === d) {\n        i = mem[offset + k - 1].i;\n        script = mem[offset + k - 1].script.unshift(new Insert(i + k - 1, to[i + k - 1]));\n      }\n      else {\n        const vi = mem[offset + k + 1].i + 1;\n        const hi = mem[offset + k - 1].i;\n        if (vi > hi) {\n          i = vi;\n          script = mem[offset + k + 1].script.unshift(new Delete(i + k));\n        }\n        else {\n          i = hi;\n          script = mem[offset + k - 1].script.unshift(new Insert(i + k - 1, to[i + k - 1]));\n        }\n      }\n      while (i < fromLen && i + k < toLen && from[i] === to[i + k]) {\n        i += 1;\n      }\n      if (k === toLen - fromLen && i === fromLen) {\n        return script.toArray().reverse();\n      }\n      mem[offset + k] = { i, script };\n    }\n  }\n  return undefined;\n}\n","/**\n * The `ITextEditor` represents an interface to a text editor.\n *\n * @interface\n */\nexport class ITextEditor {\n  /**\n   * Gets the current cursor position.\n   *\n   * @returns {Point} A point object that represents the cursor position.\n   */\n  getCursorPosition() {\n    throw new Error(\"Not implemented: getCursorPosition\");\n  }\n\n  /**\n   * Sets the cursor position to a specified one.\n   *\n   * @param {Point} pos - A point object which the cursor position is set to.\n   * @returns {undefined}\n   */\n  setCursorPosition(pos) {\n    throw new Error(\"Not implemented: setCursorPosition\");\n  }\n\n  /**\n   * Sets the selection range.\n   * This method also expects the cursor position to be moved as the end of the selection range.\n   *\n   * @param {Range} range - A range object that describes a selection range.\n   * @returns {undefined}\n   */\n  setSelectionRange(range) {\n    throw new Error(\"Not implemented: setSelectionRange\");\n  }\n\n  /**\n   * Gets the last row index of the text editor.\n   *\n   * @returns {number} The last row index.\n   */\n  getLastRow() {\n    throw new Error(\"Not implemented: getLastRow\");\n  }\n\n  /**\n   * Checks if the editor accepts a table at a row to be editted.\n   * It should return `false` if, for example, the row is in a code block (not Markdown).\n   *\n   * @param {number} row - A row index in the text editor.\n   * @returns {boolean} `true` if the table at the row can be editted.\n   */\n  acceptsTableEdit(row) {\n    throw new Error(\"Not implemented: acceptsTableEdit\");\n  }\n\n  /**\n   * Gets a line string at a row.\n   *\n   * @param {number} row - Row index, starts from `0`.\n   * @returns {string} The line at the specified row.\n   * The line must not contain an EOL like `\"\\n\"` or `\"\\r\"`.\n   */\n  getLine(row) {\n    throw new Error(\"Not implemented: getLine\");\n  }\n\n  /**\n   * Inserts a line at a specified row.\n   *\n   * @param {number} row - Row index, starts from `0`.\n   * @param {string} line - A string to be inserted.\n   * This must not contain an EOL like `\"\\n\"` or `\"\\r\"`.\n   * @return {undefined}\n   */\n  insertLine(row, line) {\n    throw new Error(\"Not implemented: insertLine\");\n  }\n\n  /**\n   * Deletes a line at a specified row.\n   *\n   * @param {number} row - Row index, starts from `0`.\n   * @returns {undefined}\n   */\n  deleteLine(row) {\n    throw new Error(\"Not implemented: deleteLine\");\n  }\n\n  /**\n   * Replace lines in a specified range.\n   *\n   * @param {number} startRow - Start row index, starts from `0`.\n   * @param {number} endRow - End row index.\n   * Lines from `startRow` to `endRow - 1` is replaced.\n   * @param {Array<string>} lines - An array of string.\n   * Each strings must not contain an EOL like `\"\\n\"` or `\"\\r\"`.\n   * @returns {undefined}\n   */\n  replaceLines(startRow, endRow, lines) {\n    throw new Error(\"Not implemented: replaceLines\");\n  }\n\n  /**\n   * Batches multiple operations as a single undo/redo step.\n   *\n   * @param {Function} func - A callback function that executes some operations on the text editor.\n   * @returns {undefined}\n   */\n  transact(func) {\n    throw new Error(\"Not implemented: transact\");\n  }\n}\n","import { DefaultAlignment, HeaderAlignment } from \"./alignment.js\";\nimport { FormatType } from \"./formatter.js\";\n\n/**\n * Reads a property of an object if exists; otherwise uses a default value.\n *\n * @private\n * @param {*} obj - An object. If a non-object value is specified, the default value is used.\n * @param {string} key - A key (or property name).\n * @param {*} defaultVal - A default value that is used when a value does not exist.\n * @returns {*} A read value or the default value.\n */\nexport function _value(obj, key, defaultVal) {\n  return (typeof obj === \"object\" && obj !== null && obj[key] !== undefined)\n    ? obj[key]\n    : defaultVal;\n}\n\n/**\n * Reads multiple properties of an object if exists; otherwise uses default values.\n *\n * @private\n * @param {*} obj - An object. If a non-object value is specified, the default value is used.\n * @param {Object} keys - An object that consists of pairs of a key and a default value.\n * @returns {Object} A new object that contains read values.\n */\nexport function _values(obj, keys) {\n  const res = {};\n  for (const [key, defaultVal] of Object.entries(keys)) {\n    res[key] = _value(obj, key, defaultVal);\n  }\n  return res;\n}\n\n/**\n * Reads options for the formatter from an object.\n * The default values are used for options that are not specified.\n *\n * @param {Object} obj - An object containing options.\n * The available options and default values are listed below.\n *\n * | property name       | type                              | description                                             | default value            |\n * | ------------------- | --------------------------------- | ------------------------------------------------------- | ------------------------ |\n * | `leftMarginChars`   | {@link Set}&lt;{@link string}&gt; | A set of additional left margin characters.             | `new Set()`              |\n * | `formatType`        | {@link FormatType}                | Format type, normal or weak.                            | `FormatType.NORMAL`      |\n * | `minDelimiterWidth` | {@link number}                    | Minimum width of delimiters.                            | `3`                      |\n * | `defaultAlignment`  | {@link DefaultAlignment}          | Default alignment of columns.                           | `DefaultAlignment.LEFT`  |\n * | `headerAlignment`   | {@link HeaderAlignment}           | Alignment of header cells.                              | `HeaderAlignment.FOLLOW` |\n * | `textWidthOptions`  | {@link Object}                    | An object containing options for computing text widths. |                          |\n * | `smartCursor`       | {@link boolean}                   | Enables \"Smart Cursor\" feature.                         | `false`                  |\n *\n * The available options for `obj.textWidthOptions` are the following ones.\n *\n * | property name     | type                              | description                                           | default value |\n * | ----------------- | --------------------------------- | ----------------------------------------------------- | ------------- |\n * | `normalize`       | {@link boolean}                   | Normalizes texts before computing text widths.        | `true`        |\n * | `wideChars`       | {@link Set}&lt;{@link string}&gt; | A set of characters that should be treated as wide.   | `new Set()`   |\n * | `narrowChars`     | {@link Set}&lt;{@link string}&gt; | A set of characters that should be treated as narrow. | `new Set()`   |\n * | `ambiguousAsWide` | {@link boolean}                   | Treats East Asian Ambiguous characters as wide.       | `false`       |\n *\n * @returns {Object} - An object that contains complete options.\n */\nexport function options(obj) {\n  const res = _values(obj, {\n    leftMarginChars  : new Set(),\n    formatType       : FormatType.NORMAL,\n    minDelimiterWidth: 3,\n    defaultAlignment : DefaultAlignment.LEFT,\n    headerAlignment  : HeaderAlignment.FOLLOW,\n    smartCursor      : false\n  });\n  res.textWidthOptions = _values(obj.textWidthOptions, {\n    normalize      : true,\n    wideChars      : new Set(),\n    narrowChars    : new Set(),\n    ambiguousAsWide: false\n  });\n  return res;\n}\n","import { Point } from \"./point.js\";\nimport { Range } from \"./range.js\";\nimport { Focus } from \"./focus.js\";\nimport { TableCell } from \"./table-cell.js\";\nimport { TableRow } from \"./table-row.js\";\nimport { marginRegexSrc, readTable } from \"./parser.js\";\nimport {\n  completeTable,\n  formatTable,\n  alterAlignment,\n  insertRow,\n  deleteRow,\n  moveRow,\n  insertColumn,\n  deleteColumn,\n  moveColumn\n} from \"./formatter.js\";\nimport { shortestEditScript, applyEditScript } from \"./edit-script.js\";\n\n/**\n * Creates a regular expression object that matches a table row.\n *\n * @param {Set<string>} leftMarginChars - A set of additional left margin characters.\n * A pipe `|`, a backslash `\\`, and a backquote will be ignored.\n * @returns {RegExp} A regular expression object that matches a table row.\n */\nexport function _createIsTableRowRegex(leftMarginChars) {\n  return new RegExp(`^${marginRegexSrc(leftMarginChars)}\\\\|`, \"u\");\n}\n\n/**\n * Computes new focus offset from information of completed and formatted tables.\n *\n * @private\n * @param {Focus} focus - A focus.\n * @param {Table} table - A completed but not formatted table with original cell contents.\n * @param {Object} formatted - Information of the formatted table.\n * @param {boolean} moved - Indicates whether the focus position is moved by a command or not.\n * @returns {number}\n */\nexport function _computeNewOffset(focus, table, formatted, moved) {\n  if (moved) {\n    const formattedFocusedCell = formatted.table.getFocusedCell(focus);\n    if (formattedFocusedCell !== undefined) {\n      return formattedFocusedCell.computeRawOffset(0);\n    }\n    else {\n      return focus.column < 0 ? formatted.marginLeft.length : 0;\n    }\n  }\n  else {\n    const focusedCell = table.getFocusedCell(focus);\n    const formattedFocusedCell = formatted.table.getFocusedCell(focus);\n    if (focusedCell !== undefined && formattedFocusedCell !== undefined) {\n      const contentOffset = Math.min(\n        focusedCell.computeContentOffset(focus.offset),\n        formattedFocusedCell.content.length\n      );\n      return formattedFocusedCell.computeRawOffset(contentOffset);\n    }\n    else {\n      return focus.column < 0 ? formatted.marginLeft.length : 0;\n    }\n  }\n}\n\n/**\n * The `TableEditor` class is at the center of the markdown-table-editor.\n * When a command is executed, it reads a table from the text editor, does some operation on the\n * table, and then apply the result to the text editor.\n *\n * To use this class, the text editor (or an interface to it) must implement {@link ITextEditor}.\n */\nexport class TableEditor {\n  /**\n   * Creates a new table editor instance.\n   *\n   * @param {ITextEditor} textEditor - A text editor interface.\n   */\n  constructor(textEditor) {\n    /** @private */\n    this._textEditor = textEditor;\n    // smart cursor\n    /** @private */\n    this._scActive = false;\n    /** @private */\n    this._scTablePos = null;\n    /** @private */\n    this._scStartFocus = null;\n    /** @private */\n    this._scLastFocus = null;\n  }\n\n  /**\n   * Resets the smart cursor.\n   * Call this method when the table editor is inactivated.\n   *\n   * @returns {undefined}\n   */\n  resetSmartCursor() {\n    this._scActive = false;\n  }\n\n  /**\n   * Checks if the cursor is in a table row.\n   * This is useful to check whether the table editor should be activated or not.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {boolean} `true` if the cursor is in a table row.\n   */\n  cursorIsInTable(options) {\n    const re = _createIsTableRowRegex(options.leftMarginChars);\n    const pos = this._textEditor.getCursorPosition();\n    return this._textEditor.acceptsTableEdit(pos.row)\n      && re.test(this._textEditor.getLine(pos.row));\n  }\n\n  /**\n   * Finds a table under the current cursor position.\n   *\n   * @private\n   * @param {Object} options - See {@link options}.\n   * @returns {Object|undefined} An object that contains information about the table;\n   * `undefined` if there is no table.\n   * The return object contains the properties listed in the table.\n   *\n   * | property name   | type                                | description                                                              |\n   * | --------------- | ----------------------------------- | ------------------------------------------------------------------------ |\n   * | `range`         | {@link Range}                       | The range of the table.                                                  |\n   * | `lines`         | {@link Array}&lt;{@link string}&gt; | An array of the lines in the range.                                      |\n   * | `table`         | {@link Table}                       | A table object read from the text editor.                                |\n   * | `focus`         | {@link Focus}                       | A focus object that represents the current cursor position in the table. |\n   */\n  _findTable(options) {\n    const re = _createIsTableRowRegex(options.leftMarginChars);\n    const pos = this._textEditor.getCursorPosition();\n    const lastRow = this._textEditor.getLastRow();\n    const lines = [];\n    let startRow = pos.row;\n    let endRow = pos.row;\n    // current line\n    {\n      const line = this._textEditor.getLine(pos.row);\n      if (!this._textEditor.acceptsTableEdit(pos.row) || !re.test(line)) {\n        return undefined;\n      }\n      lines.push(line);\n    }\n    // previous lines\n    for (let row = pos.row - 1; row >= 0; row--) {\n      const line = this._textEditor.getLine(row);\n      if (!this._textEditor.acceptsTableEdit(row) || !re.test(line)) {\n        break;\n      }\n      lines.unshift(line);\n      startRow = row;\n    }\n    // next lines\n    for (let row = pos.row + 1; row <= lastRow; row++) {\n      const line = this._textEditor.getLine(row);\n      if (!this._textEditor.acceptsTableEdit(row) || !re.test(line)) {\n        break;\n      }\n      lines.push(line);\n      endRow = row;\n    }\n    const range = new Range(\n      new Point(startRow, 0),\n      new Point(endRow, lines[lines.length - 1].length)\n    );\n    const table = readTable(lines, options);\n    const focus = table.focusOfPosition(pos, startRow);\n    return { range, lines, table, focus };\n  }\n\n  /**\n   * Finds a table and does an operation with it.\n   *\n   * @private\n   * @param {Object} options - See {@link options}.\n   * @param {Function} func - A function that does some operation on table information obtained by\n   * {@link TableEditor#_findTable}.\n   * @returns {undefined}\n   */\n  _withTable(options, func) {\n    const info = this._findTable(options);\n    if (info === undefined) {\n      return;\n    }\n    func(info);\n  }\n\n  /**\n   * Updates lines in a given range in the text editor.\n   *\n   * @private\n   * @param {number} startRow - Start row index, starts from `0`.\n   * @param {number} endRow - End row index.\n   * Lines from `startRow` to `endRow - 1` are replaced.\n   * @param {Array<string>} newLines - New lines.\n   * @param {Array<string>} [oldLines=undefined] - Old lines to be replaced.\n   * @returns {undefined}\n   */\n  _updateLines(startRow, endRow, newLines, oldLines = undefined) {\n    if (oldLines !== undefined) {\n      // apply the shortest edit script\n      // if a table is edited in a normal manner, the edit distance never exceeds 3\n      const ses = shortestEditScript(oldLines, newLines, 3);\n      if (ses !== undefined) {\n        applyEditScript(this._textEditor, ses, startRow);\n        return;\n      }\n    }\n    this._textEditor.replaceLines(startRow, endRow, newLines);\n  }\n\n  /**\n   * Moves the cursor position to the focused cell,\n   *\n   * @private\n   * @param {number} startRow - Row index where the table starts in the text editor.\n   * @param {Table} table - A table.\n   * @param {Focus} focus - A focus to which the cursor will be moved.\n   * @returns {undefined}\n   */\n  _moveToFocus(startRow, table, focus) {\n    const pos = table.positionOfFocus(focus, startRow);\n    if (pos !== undefined) {\n      this._textEditor.setCursorPosition(pos);\n    }\n  }\n\n  /**\n   * Selects the focused cell.\n   * If the cell has no content to be selected, then just moves the cursor position.\n   *\n   * @private\n   * @param {number} startRow - Row index where the table starts in the text editor.\n   * @param {Table} table - A table.\n   * @param {Focus} focus - A focus to be selected.\n   * @returns {undefined}\n   */\n  _selectFocus(startRow, table, focus) {\n    const range = table.selectionRangeOfFocus(focus, startRow);\n    if (range !== undefined) {\n      this._textEditor.setSelectionRange(range);\n    }\n    else {\n      this._moveToFocus(startRow, table, focus);\n    }\n  }\n\n  /**\n   * Formats the table under the cursor.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  format(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // format\n      const formatted = formatTable(completed.table, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, completed.table, formatted, false));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n    });\n  }\n\n  /**\n   * Formats and escapes from the table.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  escape(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      // complete\n      const completed = completeTable(table, options);\n      // format\n      const formatted = formatTable(completed.table, options);\n      // apply\n      const newRow = range.end.row + (completed.delimiterInserted ? 2 : 1);\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        let newPos;\n        if (newRow > this._textEditor.getLastRow()) {\n          this._textEditor.insertLine(newRow, \"\");\n          newPos = new Point(newRow, 0);\n        }\n        else {\n          const re = new RegExp(`^${marginRegexSrc(options.leftMarginChars)}`, \"u\");\n          const nextLine = this._textEditor.getLine(newRow);\n          const margin = re.exec(nextLine)[0];\n          newPos = new Point(newRow, margin.length);\n        }\n        this._textEditor.setCursorPosition(newPos);\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Alters the alignment of the focused column.\n   *\n   * @param {Alignment} alignment - New alignment.\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  alignColumn(alignment, options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // alter alignment\n      let altered = completed.table;\n      if (0 <= newFocus.column && newFocus.column <= altered.getHeaderWidth() - 1) {\n        altered = alterAlignment(completed.table, newFocus.column, alignment, options);\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, completed.table, formatted, false));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n    });\n  }\n\n  /**\n   * Selects the focused cell content.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  selectCell(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // format\n      const formatted = formatTable(completed.table, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, completed.table, formatted, false));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._selectFocus(range.start.row, formatted.table, newFocus);\n      });\n    });\n  }\n\n  /**\n   * Moves the focus to another cell.\n   *\n   * @param {number} rowOffset - Offset in row.\n   * @param {number} columnOffset - Offset in column.\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  moveFocus(rowOffset, columnOffset, options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      const startFocus = newFocus;\n      // move focus\n      if (rowOffset !== 0) {\n        const height = completed.table.getHeight();\n        // skip delimiter row\n        const skip =\n            newFocus.row < 1 && newFocus.row + rowOffset >= 1 ? 1\n          : newFocus.row > 1 && newFocus.row + rowOffset <= 1 ? -1\n          : 0;\n        newFocus = newFocus.setRow(\n          Math.min(Math.max(newFocus.row + rowOffset + skip, 0), height <= 2 ? 0 : height - 1)\n        );\n      }\n      if (columnOffset !== 0) {\n        const width = completed.table.getHeaderWidth();\n        if (!(newFocus.column < 0 && columnOffset < 0)\n          && !(newFocus.column > width - 1 && columnOffset > 0)) {\n          newFocus = newFocus.setColumn(\n            Math.min(Math.max(newFocus.column + columnOffset, 0), width - 1)\n          );\n        }\n      }\n      const moved = !newFocus.posEquals(startFocus);\n      // format\n      const formatted = formatTable(completed.table, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, completed.table, formatted, moved));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        if (moved) {\n          this._selectFocus(range.start.row, formatted.table, newFocus);\n        }\n        else {\n          this._moveToFocus(range.start.row, formatted.table, newFocus);\n        }\n      });\n      if (moved) {\n        this.resetSmartCursor();\n      }\n    });\n  }\n\n  /**\n   * Moves the focus to the next cell.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  nextCell(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      // reset smart cursor if moved\n      const focusMoved = (this._scTablePos !== null && !range.start.equals(this._scTablePos))\n        || (this._scLastFocus !== null && !focus.posEquals(this._scLastFocus));\n      if (this._scActive && focusMoved) {\n        this.resetSmartCursor();\n      }\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      const startFocus = newFocus;\n      let altered = completed.table;\n      // move focus\n      if (newFocus.row === 1) {\n        // move to next row\n        newFocus = newFocus.setRow(2);\n        if (options.smartCursor) {\n          if (newFocus.column < 0 || altered.getHeaderWidth() - 1 < newFocus.column) {\n            newFocus = newFocus.setColumn(0);\n          }\n        }\n        else {\n          newFocus = newFocus.setColumn(0);\n        }\n        // insert an empty row if needed\n        if (newFocus.row > altered.getHeight() - 1) {\n          const row = new Array(altered.getHeaderWidth()).fill(new TableCell(\"\"));\n          altered = insertRow(altered, altered.getHeight(), new TableRow(row, \"\", \"\"));\n        }\n      }\n      else {\n        // insert an empty column if needed\n        if (newFocus.column > altered.getHeaderWidth() - 1) {\n          const column = new Array(altered.getHeight() - 1).fill(new TableCell(\"\"));\n          altered = insertColumn(altered, altered.getHeaderWidth(), column, options);\n        }\n        // move to next column\n        newFocus = newFocus.setColumn(newFocus.column + 1);\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, true));\n      // apply\n      const newLines = formatted.table.toLines();\n      if (newFocus.column > formatted.table.getHeaderWidth() - 1) {\n        // add margin\n        newLines[newFocus.row] += \" \";\n        newFocus = newFocus.setOffset(1);\n      }\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, newLines, lines);\n        this._selectFocus(range.start.row, formatted.table, newFocus);\n      });\n      if (options.smartCursor) {\n        if (!this._scActive) {\n          // activate smart cursor\n          this._scActive = true;\n          this._scTablePos = range.start;\n          if (startFocus.column < 0 || formatted.table.getHeaderWidth() - 1 < startFocus.column) {\n            this._scStartFocus = new Focus(startFocus.row, 0, 0);\n          }\n          else {\n            this._scStartFocus = startFocus;\n          }\n        }\n        this._scLastFocus = newFocus;\n      }\n    });\n  }\n\n  /**\n   * Moves the focus to the previous cell.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  previousCell(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      const startFocus = newFocus;\n      // move focus\n      if (newFocus.row === 0) {\n        if (newFocus.column > 0) {\n          newFocus = newFocus.setColumn(newFocus.column - 1);\n        }\n      }\n      else if (newFocus.row === 1) {\n        newFocus = new Focus(0, completed.table.getHeaderWidth() - 1, newFocus.offset);\n      }\n      else {\n        if (newFocus.column > 0) {\n          newFocus = newFocus.setColumn(newFocus.column - 1);\n        }\n        else {\n          newFocus = new Focus(\n            newFocus.row === 2 ? 0 : newFocus.row - 1,\n            completed.table.getHeaderWidth() - 1,\n            newFocus.offset\n          );\n        }\n      }\n      const moved = !newFocus.posEquals(startFocus);\n      // format\n      const formatted = formatTable(completed.table, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, completed.table, formatted, moved));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        if (moved) {\n          this._selectFocus(range.start.row, formatted.table, newFocus);\n        }\n        else {\n          this._moveToFocus(range.start.row, formatted.table, newFocus);\n        }\n      });\n      if (moved) {\n        this.resetSmartCursor();\n      }\n    });\n  }\n\n  /**\n   * Moves the focus to the next row.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  nextRow(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      // reset smart cursor if moved\n      const focusMoved = (this._scTablePos !== null && !range.start.equals(this._scTablePos))\n        || (this._scLastFocus !== null && !focus.posEquals(this._scLastFocus));\n      if (this._scActive && focusMoved) {\n        this.resetSmartCursor();\n      }\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      const startFocus = newFocus;\n      let altered = completed.table;\n      // move focus\n      if (newFocus.row === 0) {\n        newFocus = newFocus.setRow(2);\n      }\n      else {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      if (options.smartCursor) {\n        if (this._scActive) {\n          newFocus = newFocus.setColumn(this._scStartFocus.column);\n        }\n        else if (newFocus.column < 0 || altered.getHeaderWidth() - 1 < newFocus.column) {\n          newFocus = newFocus.setColumn(0);\n        }\n      }\n      else {\n        newFocus = newFocus.setColumn(0);\n      }\n      // insert empty row if needed\n      if (newFocus.row > altered.getHeight() - 1) {\n        const row = new Array(altered.getHeaderWidth()).fill(new TableCell(\"\"));\n        altered = insertRow(altered, altered.getHeight(), new TableRow(row, \"\", \"\"));\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, true));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._selectFocus(range.start.row, formatted.table, newFocus);\n      });\n      if (options.smartCursor) {\n        if (!this._scActive) {\n          // activate smart cursor\n          this._scActive = true;\n          this._scTablePos = range.start;\n          if (startFocus.column < 0 || formatted.table.getHeaderWidth() - 1 < startFocus.column) {\n            this._scStartFocus = new Focus(startFocus.row, 0, 0);\n          }\n          else {\n            this._scStartFocus = startFocus;\n          }\n        }\n        this._scLastFocus = newFocus;\n      }\n    });\n  }\n\n  /**\n   * Inserts an empty row at the current focus.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  insertRow(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // move focus\n      if (newFocus.row <= 1) {\n        newFocus = newFocus.setRow(2);\n      }\n      newFocus = newFocus.setColumn(0);\n      // insert an empty row\n      const row = new Array(completed.table.getHeaderWidth()).fill(new TableCell(\"\"));\n      const altered = insertRow(completed.table, newFocus.row, new TableRow(row, \"\", \"\"));\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, true));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Deletes a row at the current focus.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  deleteRow(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // delete a row\n      let altered = completed.table;\n      let moved = false;\n      if (newFocus.row !== 1) {\n        altered = deleteRow(altered, newFocus.row);\n        moved = true;\n        if (newFocus.row > altered.getHeight() - 1) {\n          newFocus = newFocus.setRow(newFocus.row === 2 ? 0 : newFocus.row - 1);\n        }\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, moved));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        if (moved) {\n          this._selectFocus(range.start.row, formatted.table, newFocus);\n        }\n        else {\n          this._moveToFocus(range.start.row, formatted.table, newFocus);\n        }\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Moves the focused row by the specified offset.\n   *\n   * @param {number} offset - An offset the row is moved by.\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  moveRow(offset, options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // move row\n      let altered = completed.table;\n      if (newFocus.row > 1) {\n        const dest = Math.min(Math.max(newFocus.row + offset, 2), altered.getHeight() - 1);\n        altered = moveRow(altered, newFocus.row, dest);\n        newFocus = newFocus.setRow(dest);\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, false));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Inserts an empty column at the current focus.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  insertColumn(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // move focus\n      if (newFocus.row === 1) {\n        newFocus = newFocus.setRow(0);\n      }\n      if (newFocus.column < 0) {\n        newFocus = newFocus.setColumn(0);\n      }\n      // insert an empty column\n      const column = new Array(completed.table.getHeight() - 1).fill(new TableCell(\"\"));\n      const altered = insertColumn(completed.table, newFocus.column, column, options);\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, true));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Deletes a column at the current focus.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  deleteColumn(options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // move focus\n      if (newFocus.row === 1) {\n        newFocus = newFocus.setRow(0);\n      }\n      // delete a column\n      let altered = completed.table;\n      let moved = false;\n      if (0 <= newFocus.column && newFocus.column <= altered.getHeaderWidth() - 1) {\n        altered = deleteColumn(completed.table, newFocus.column, options);\n        moved = true;\n        if (newFocus.column > altered.getHeaderWidth() - 1) {\n          newFocus = newFocus.setColumn(altered.getHeaderWidth() - 1);\n        }\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, moved));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        if (moved) {\n          this._selectFocus(range.start.row, formatted.table, newFocus);\n        }\n        else {\n          this._moveToFocus(range.start.row, formatted.table, newFocus);\n        }\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Moves the focused column by the specified offset.\n   *\n   * @param {number} offset - An offset the column is moved by.\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  moveColumn(offset, options) {\n    this._withTable(options, ({ range, lines, table, focus }) => {\n      let newFocus = focus;\n      // complete\n      const completed = completeTable(table, options);\n      if (completed.delimiterInserted && newFocus.row > 0) {\n        newFocus = newFocus.setRow(newFocus.row + 1);\n      }\n      // move column\n      let altered = completed.table;\n      if (0 <= newFocus.column && newFocus.column <= altered.getHeaderWidth() - 1) {\n        const dest = Math.min(Math.max(newFocus.column + offset, 0), altered.getHeaderWidth() - 1);\n        altered = moveColumn(altered, newFocus.column, dest);\n        newFocus = newFocus.setColumn(dest);\n      }\n      // format\n      const formatted = formatTable(altered, options);\n      newFocus = newFocus.setOffset(_computeNewOffset(newFocus, altered, formatted, false));\n      // apply\n      this._textEditor.transact(() => {\n        this._updateLines(range.start.row, range.end.row + 1, formatted.table.toLines(), lines);\n        this._moveToFocus(range.start.row, formatted.table, newFocus);\n      });\n      this.resetSmartCursor();\n    });\n  }\n\n  /**\n   * Formats all the tables in the text editor.\n   *\n   * @param {Object} options - See {@link options}.\n   * @returns {undefined}\n   */\n  formatAll(options) {\n    this._textEditor.transact(() => {\n      const re = _createIsTableRowRegex(options.leftMarginChars);\n      let pos = this._textEditor.getCursorPosition();\n      let lines = [];\n      let startRow = undefined;\n      let lastRow = this._textEditor.getLastRow();\n      // find tables\n      for (let row = 0; row <= lastRow; row++) {\n        const line = this._textEditor.getLine(row);\n        if (this._textEditor.acceptsTableEdit(row) && re.test(line)) {\n          lines.push(line);\n          if (startRow === undefined) {\n            startRow = row;\n          }\n        }\n        else if (startRow !== undefined) {\n          // get table info\n          const endRow = row - 1;\n          const range = new Range(\n            new Point(startRow, 0),\n            new Point(endRow, lines[lines.length - 1].length)\n          );\n          const table = readTable(lines, options);\n          const focus = table.focusOfPosition(pos, startRow);\n          const focused = focus !== undefined;\n          // format\n          let newFocus = focus;\n          const completed = completeTable(table, options);\n          if (focused && completed.delimiterInserted && newFocus.row > 0) {\n            newFocus = newFocus.setRow(newFocus.row + 1);\n          }\n          const formatted = formatTable(completed.table, options);\n          if (focused) {\n            newFocus = newFocus.setOffset(\n              _computeNewOffset(newFocus, completed.table, formatted, false)\n            );\n          }\n          // apply\n          const newLines = formatted.table.toLines();\n          this._updateLines(range.start.row, range.end.row + 1, newLines, lines);\n          // update cursor position\n          const diff = newLines.length - lines.length;\n          if (focused) {\n            pos = formatted.table.positionOfFocus(newFocus, startRow);\n          }\n          else if (pos.row > endRow) {\n            pos = new Point(pos.row + diff, pos.column);\n          }\n          // reset\n          lines = [];\n          startRow = undefined;\n          // update\n          lastRow += diff;\n          row += diff;\n        }\n      }\n      if (startRow !== undefined) {\n        // get table info\n        const endRow = lastRow;\n        const range = new Range(\n          new Point(startRow, 0),\n          new Point(endRow, lines[lines.length - 1].length)\n        );\n        const table = readTable(lines, options);\n        const focus = table.focusOfPosition(pos, startRow);\n        // format\n        let newFocus = focus;\n        const completed = completeTable(table, options);\n        if (completed.delimiterInserted && newFocus.row > 0) {\n          newFocus = newFocus.setRow(newFocus.row + 1);\n        }\n        const formatted = formatTable(completed.table, options);\n        newFocus = newFocus.setOffset(\n          _computeNewOffset(newFocus, completed.table, formatted, false)\n        );\n        // apply\n        const newLines = formatted.table.toLines();\n        this._updateLines(range.start.row, range.end.row + 1, newLines, lines);\n        pos = formatted.table.positionOfFocus(newFocus, startRow);\n      }\n      this._textEditor.setCursorPosition(pos);\n    });\n  }\n}\n"],"names":[],"mappings":"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"}