{
  "_args": [
    [
      {
        "raw": "clang-format@github:angular/clang-format",
        "scope": null,
        "escapedName": "clang-format",
        "name": "clang-format",
        "rawSpec": "github:angular/clang-format",
        "spec": "github:angular/clang-format",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:angular/clang-format.git",
          "sshUrl": "git+ssh://git@github.com/angular/clang-format.git",
          "httpsUrl": "git+https://github.com/angular/clang-format.git",
          "gitUrl": "git://github.com/angular/clang-format.git",
          "shortcut": "github:angular/clang-format",
          "directUrl": "https://raw.githubusercontent.com/angular/clang-format/master/package.json"
        }
      },
      "/tmp/d-118412-27428-und0o6.s5bhzx5hfr/package.tgz"
    ]
  ],
  "_from": "angular/clang-format",
  "_id": "clang-format@1.2.3",
  "_inCache": true,
  "_location": "/clang-format/clang-format",
  "_phantomChildren": {},
  "_requested": {
    "raw": "clang-format@github:angular/clang-format",
    "scope": null,
    "escapedName": "clang-format",
    "name": "clang-format",
    "rawSpec": "github:angular/clang-format",
    "spec": "github:angular/clang-format",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:angular/clang-format.git",
      "sshUrl": "git+ssh://git@github.com/angular/clang-format.git",
      "httpsUrl": "git+https://github.com/angular/clang-format.git",
      "gitUrl": "git://github.com/angular/clang-format.git",
      "shortcut": "github:angular/clang-format",
      "directUrl": "https://raw.githubusercontent.com/angular/clang-format/master/package.json"
    }
  },
  "_requiredBy": [],
  "_resolved": "git://github.com/angular/clang-format.git#b25cd8d625a92b09b2d8c9e8471e1371fecca2d7",
  "_shasum": "f729a49e782c0efe0e726ce62c2acf1e0fd0f228",
  "_shrinkwrap": null,
  "_spec": "clang-format@github:angular/clang-format",
  "_where": "/tmp/d-118412-27428-und0o6.s5bhzx5hfr/package.tgz",
  "bin": {
    "clang-format": "index.js",
    "git-clang-format": "bin/git-clang-format",
    "check-clang-format": "bin/check-clang-format.js"
  },
  "bugs": {
    "url": "https://github.com/angular/clang-format/issues"
  },
  "contributors": [
    {
      "name": "Alex Eagle",
      "email": "alexeagle@google.com"
    },
    {
      "name": "Martin Probst",
      "email": "martinprobst@google.com"
    },
    {
      "name": "Filipe Silva",
      "email": "filipematossilva@gmail.com"
    },
    {
      "name": "Victor Berchet",
      "email": "victor@suumit.com"
    }
  ],
  "dependencies": {
    "async": "^1.5.2",
    "glob": "^7.0.0",
    "resolve": "^1.1.6"
  },
  "description": "node wrapper around clang-format",
  "devDependencies": {},
  "gitHead": "b25cd8d625a92b09b2d8c9e8471e1371fecca2d7",
  "homepage": "https://github.com/angular/clang-format#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "clang-format",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/angular/clang-format.svg?branch=master)](https://travis-ci.org/angular/clang-format)\n\n# clang-format\nnode.js module which wraps the native clang-format executable.\n\n## From the command-line:\n\n    $ npm install -g clang-format\n    $ clang-format -help\n\nIf your platform isn't yet supported, you can create the native binary from\nthe latest upstream clang sources, make sure it is stripped and optimized\n(should be about 1.4MB as of mid-2015) and send a pull request to add it.\n\n## Checking formatting\n\nEnsuring that changes to your code are properly formatted is an important part\nof your development workflow. We recommend using a git pre-commit hook. You can\nconfigure this as follows:\n\n1. add a `precommit` script to your package.json file:\n\n    ```js\n    \"scripts\": {\n        \"precommit\": \"check-clang-format\"\n    }\n    ```\n\n    By default, the user gets an error instructing them to run\n    `./node_modules/.bin/git-clang-format`. You may find it more ergonomic to set\n    up a package.json script, eg.\n    `\"scripts\": { \"format\": \"git-clang-format\" }`\n\n    In this case, add a second argument to the \"precommit\" script, giving the\n    error you'd like to print for users, eg.\n\n    `\"precommit\": \"check-clang-format \\\"yarn format\\\"\"`\n\n2. Add a devDependency on the `husky` package, which will add a\n  `.git/hooks/pre-commit` script, which in turn triggers the `precommit`\n  package.json script to run whenever someone adds a commit in this repository:\n\n    ```sh\n    $ yarn add -D husky\n    ```\n\n    or\n\n    ```sh\n    npm install --save-dev husky\n    ```\n\n> Why do this in a pre-commit hook? For one thing, it's faster to run\n  `clang-format` only on the changed files, especially as the repository grows.\n  Also, this lets you upgrade `clang-format` or change your settings without\n  needing to re-format the entire repository, while still enforcing that later\n  changes follow the new style.\n\n## Globbing files\n\n    $ clang-format --glob=folder/**/*.js\n\nThis will run `clang-format` once per file result, and show the total\nformatted files at the end.\nSee [node-glob](https://github.com/isaacs/node-glob) for globbing semantics.\n\n## Compiling clang-format\n\nFor Linux, compile a statically linked MinSizeRel build:\n\n    cmake -G Ninja -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_BUILD_STATIC=true ..\n    ninja clang-format\n\nFor Mac OS X, static linking is not required.\n\n## Windows\n\nWindows snapshot builds to include in the release can be found at the\n[LLVM website](http://llvm.org/builds/).\n\nConfigure with:\n\n    cmake -G \"Visual Studio 12\" -DCMAKE_BUILD_TYPE=MinSizeRel ..\n\nIn the generated Visual Studio project, search for the `clang-format` binary in\nthe Solution Explorer window, right click and choose Build.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/angular/clang-format.git"
  },
  "scripts": {
    "test": "./test.sh"
  },
  "version": "1.2.3"
}
