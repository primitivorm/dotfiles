"fileTypes": [
    "asm"
    "a51"
    "s"
    "inc"
    "asmh"
    "mac"
]

"name": "Assembly - x86 (Intel Syntax)"
"scopeName": "source.assembly.asm.x86.intel"

"patterns": [
    {
        "begin": "(?i)^\\s*%\\s*if\\s+0\\b"
        "end": "(?i)^\\s*%\\s*endif\\b"
        "name": "comment.block.preprocessor"
    }
    {
        "begin": "(?i)^\\s*%\\s*comment\\b"
        "end": "(?i)^\\s*%\\s*endcomment\\b"
        "name": "comment.block.preprocessor"
    }
    {
        "begin": "/\\*"
        "end": "\\*/"
        "name": "comment.block"
    }
    {
        "match": ";.*$"
        "name": "comment.line"
    }
    {
        "match": "(?i)^\\s*%\\s*([xi]?define|ixdefine|undef|assign|i?defstr|deftok|strcat|strlen|substr|(end|un|i)?macro|endm|rotate|(el)?ifn?(def|macro|ctx|idni?|id|num|str|token|empty|env)?|else|endif|include|import|pathsearch|depend|use|push|pop|(end|exit)?rep|repl|arg|stacksize|local|error|warning|fatal|line|\\!|pragma)(?=\\b)"
        "name": "keyword.meta.preprocessor"
    }
    {
        "match": "(?i)(^|\\s)%\\s*00?(?=\\b)"
        "name": "keyword.meta.preprocessor"
    }
    {
        "match": "^\\s*([A-Za-z\\$\\._\\?][0-9A-Za-z_\\$\\#@~\\.\\?]*)\\s*:"
        "name": "entity.name.function.label"
    }
    {
        "match": "(?i)(?:\\b(j(?:n?(?:[abgl]?e|[abglcopsz])|p[eo]?|[er]?cxz)|jmp|call)\\s+((?:[er]?(?:[abcd]x|si|di|[bs]p))|r(?:1[0-5]|[0-9])))\\b"
        "captures":
            "1": "name": "keyword"
            "2": "name": "variable.register"
    }
    {
        # Well, this thing is pain. There's a whole load of code duplication
        # too. Checks for
        #   `<branch> [modifier] <label|constant|$>[:<label|constant|$>]`
        "match": "(?:\\b(j(?:n?(?:[abgl]?e|[abglcopsz])|p[eo]?|[er]?cxz)|jmp|loop(?:n?[ez])?|call)\\s+(?:(short|long|near|far)\\s+)?(?:([A-Z_][0-9A-Z_]+)|([A-Za-z_][0-9A-Za-z_\\.]*|\\.[0-9A-Za-z_][0-9A-Za-z_\\.]*)|([01_]+[bByY]|0[bByY][01_]+|[0-7_]+[oOqQ]|0[oOqQ][0-7_]+|[0-9_]+[dDtT]?|0[dDtT][0-9_]+|[0-9A-Fa-f_]+[hHxX]|0[hHxX][0-9A-Fa-f_]+|\\$0[0-9A-Fa-f_]+|)|(\\$))(?=\\b)(?:\\s*:\\s*(?:([A-Z_][0-9A-Z_]+)|((?:[A-Za-z_][0-9A-Za-z_\\.]*|\\.[0-9A-Za-z_][0-9A-Za-z_\\.]*))|([01_]+[bByY]|0[bByY][01_]+|[0-7_]+[oOqQ]|0[oOqQ][0-7_]+|[0-9_]+[dDtT]?|0[dDtT][0-9_]+|[0-9A-Fa-f_]+[hHxX]|0[hHxX][0-9A-Fa-f_]+|\\$0[0-9A-Fa-f_]+|)|(\\$))(?=\\b))?)"
        "captures":
            "1": "name": "keyword"
            "2": "name": "entity.name.type"
            "3": "name": "constant.name"
            "4": "name": "entity.name.function.identifier"
            "5": "name": "constant.numeric"
            "6": "name": "keyword.punctuation"
            "7": "name": "constant.name"
            "8": "name": "entity.name.function.identifier"
            "9": "name": "constant.numeric"
            "10": "name": "keyword.punctuation"
    }
    {
        "match": "(?i)\\b(([er]?([abcd]x|si|di|[bs]p))|[abcd][hl]|[cdefgs]s|cr[012348]|[ds]il|[bs]pl|r(1[0-5]|[0-9])[blwd]?|(st|mm|dr)[0-7]|(xmm|ymm)(1[0-5]|[0-9]))(?=\\b)"
        "name": "variable.register"
    }
    {
        "match": "(?i)\\b(aaa|aad|aam|aas|adcx?|add[c]?|adox|andn?|anl|arpl|bb[01]_reset|bextr|bl[cs]ic?|bl[cs]fill|bl[cs]msk|blcs|blsr|bndc[lnu]|bndldx|bndmk|bndmov|bndstx|bound|bsf|bsr|bswap|bt[crs]?|bzhi|call|cbw|cwde?|cdqe?|cl(a?c|d|i|r|ts)|clflushopt|clzero|cmc|cmov(n?([abgl]?e|[abglcosz])|p[eo]?)|cmp|cmps[bwdq]?|cmpxchg((8|16)b|486)?|cp(uid|l)|cpu_(read|write)|cqo|daa?|das|dec|div|dmint|emms|enter|f2xm1|fabs|faddp?|fiadd|fbld|fbstp|fchs|fn?clex|fcmov(n?be?|n?u|n?e)|fcomp?p?|fu?comip?|fcos|fdecstp|fn?disi|fdivr?p?|fidivr?|femms|fn?eni|ffreep?|ficomp?|fild|fincstp|fn?init|fistp?|fisttp|fld(1|l2t|l2e|pi|lg2|ln2|z|cw|env)?|fmulp?|fimul|fnop|fpa?tan|fprem1?|frndint|frstor|fn?save|fscale|fsetpm|fsin|fsincos|fsqrt|fstp?|fn?st(cw|env|sw)|fsubr?p?|fisubr?|ftst|fucomp?p?|fxam|fxch|fxtract|fyl2x(p1)?|getsec|hlt|ibts|icebp|idiv|imul|in|inc|ins[bwd]?|int|int0?[13]|into|inv(d|lpga?|pcid)|iret[wdq]?|d?j(n?([abgl]?e|[abglcosz])|p[eo]?|[er]?cxz)|[s|l|a]?jmp|jmpe?|lahf|lar|l[defgs]s|lea|leave|lgdt|lidt|lldt|[ls]lwpcb|lcall|lwp(val|ins)|lmsw|loadall(286)?|loadalld|lock|lods[bwdq]?|loop(n?[ez])?|lsl|ltr|lzcnt|monitorx?|montmul|mov|movbe|movddup|movs[bwdq]?|movsxd?|movzx|movx|mul(t|x?)|mwaitx?|neg|nop|not|orl?|out|outs[bwd]?|paddsiw|pause|paveb|pavgusb|pclmulqdq|pclmul[hl]q[hl]qdq|pdep|pdistib|pext|pfacc|pfadd|pfcmp(eq|ge|gt)|pfmax|pfmin|pfmul|pfrcpit[12]|pfrsqit1|pfsubr?|pmachriw|pmagw|pmulhr(iw|w[ac])|pmov[sz]x|pmvgezb|pmv[ln]?zb|pop|popa[dw]?|popf[wdq]?|prefetch[012]?|prefetcht[012]|prefetchnta|prefetchw(t1)?|psubsiw|push|pusha[dw]?|pushf[wdq]?|rcl|rcr|reti?|rol|rlc?|ror|rcp[ps]s|rd[fg]sbase|rdm|rdmsr|rdpkru|rdpmc|rdrand|rdseed|rdshr|rdtscp?|rep|repn?[ez]|ret[fn]?|rrc?|rsdc|rsldt|rsts|rorx|rsm|rsqrt[ps]s|sahf|salc?|sar|shl|shr|sarx|shlx|shrx|sbb|scas[bwdq]?|set(n?([abgl]?e|[abglcosz])|p[eo]?)|sfence|sgdt|sh[lr]d|sidt|sldt|skinit|smi|smint|smintold|smsw|st(a?c|d|i)|stos[bwdq]?|str|subb?|svdc|svldt|svts|swap(gs)?|syscall|sysenter|sysexit|sysret|t1mskc|test|tzcnt|tzmsk|ud[012]|ud2[ab]|umov|ver[rw]|vfn?m(add|sub)(123|132|213|231|312|321)[ps][ds]|vfm(addsub|subadd)(123|132|213|231|312|321)p[ds]|vgather(dpd|qpd|dps|qps|dd|qd|dq|qq)|f?wait|wbinvd|wr[fg]sbase|wrmsr|wrpkru|wrshr|xacquire|xrelease|xabort|xadd|xbegin|xbts|xch(g|d)?|xcrypt(ecb|cbc|ctr|[co]fb)|xend|xlatb?|xor|xrl|xsha(1|256)|xstore|xtest)(?=\\b)"
        "name": "keyword.mnemonic"
    }
    {
        "match": "(?i)\\b(add[ps][ds]|addsubp[ds]|aesdec|aesdeclast|aesenc|aesenclast|aesimc|aeskeygenassist|andn?p[ds]|blendv?p[ds]|clflush|cmpn?(eq|l[et])[ps][ds]|cmp(un)?ord[ps][ds]|cmp[ps][ds]|comis[ds]|crc32|cvt(dq2(pd|ps)|pd2(dq|pi|ps)|pi2(pd|ps)|ps2(dq|pd|pi)|sd2(si|ss)|si2(sd|ss)|ss2(sd|si)|tpd2(dq|pi)|tps2(dq|pi)|ts[ds]2si)|div[ps][ds]|dpp[ds]|extractps|extrq|fxrstor(64)?|fxsave(64)?|haddp[ds]|hsubp[ds]|insertps|insertq|lddqu|ldmxcsr|lfence|maskmovdqu|max[ps][ds]|mfence|min[ps][ds]|mov[au]p[ds]|mov[dq]|movdq[au]|movdq2q|movq2dq|movhlps|movlhps|mov[hl]p[ds]|movmskp[ds]|movntdqa?|movnti|movntp[ds]|movnt[ps][ds]|movs[ds]|movs[hl]dup|mpsadbw|mul[ps][ds]|x?orp[ds]|packss(dw|wb)|packus(dw|wb)|padd[bwdq]|paddu?s[bw]|pandn?|pavg[bw]|pblendvb|pblendw|pcmpeq[bwdq]|pcmpgt[bwdq]|pcmp[ei]str[im]|pextr[bwdq]?|pabs[bwd]|palignr|phadd[wd]|phaddsw|phminposuw|phsub[wd]|phsubsw|pinsr[bwdq]|pmaddubsw|pmaddwd|pmax[su][bwd]|pmin[su][bwd]|pmovmskb|pmov[sz]xb[wdq]|pmov[sz]xw[dq]|pmov[sz]xdq|pmulhrsw|pmulhu?w|pmull[dw]|pmulu?dq|popcnt|por|psadbw|pshuf[bwd]|pshuf[hl]w|psign[bwd]|pslldq|psll[wdq]|psra[wd]|psrldq|psrl[wdq]|psub[bwdq]|psubu?s[bw]|ptest|punpck[hl](bw|wd|q?dq)|pxor|round[ps][ds]|shufp[ds]|sub[ps][ds]|sqrt[ps][ds]|stmxcsr|ucomis[ds]|unpck[hl]p[ds]|vfn?madd[ps][ds]|vfmaddsubp[ds]|vfmsubaddp[ds]|vfn?msub[ps][ds]|vfrcz[ps][ds]|vpcmov|vpcomu?[bwdq]|vphaddu?b[wdq]|vphaddu?w[dq]|vphaddu?dq|vphsubbw|vphsubdq|vphsubwd|vpmacsdq[hl]|vpmacss?dd|vpmacssdq[hl]|vpmacss?w[wd]|vpmadcss?wd|vpperm|vprot[bwdq]|vpsha[bwdq]|vpshl[bwdq])(?=\\b)"
        "name": "keyword.sse"
    }
    {
        "match": "(?i)\\b(maskmovq|movntq)(?=\\b)"
        "name": "keyword.mmx"
    }
    {
        "match": "(?i)\\b(pf2i[dw]|pfrcpv?|pfrsqrtv?|pfp?nacc|pi2f[wd]|pswapd)(?=\\b)"
        "name": "keyword.3dnow"
    }
    {
        "match": "(?i)\\b(clgi|stgi|vmcall|vmclear|vmfunc|vmlaunch|vmload|vmmcall|vmptrld|vmptrst|vmread|vmresume|vmrun|vmsave|vmwrite|vmxoff|vmxon|inv(ept|vpid))(?=\\b)"
        "name": "keyword.vmx.svm"
    }
    {
        "match": "(?i)\\b(vaes(enc|dec)(last)?|vaesimc|vaeskeygenassist|vadd[ps][ds]|vaddsubp[ds]|valignq|vandn?p[ds]|vblend[mv]?p[ds]|vbroadcasts[ds]|vbroadcasti128|vcmp(eq|l[et])_osp[ds]|vcmp(eq|l[et])p[ds]|vcmpunord_qp[ds]|vcmpunordp[ds]|vcmpn?eq_uqp[ds]|vcmpneqp[ds]|vcmpnl[et]_usp[ds]|vcmpnl[et]p[ds]|vcmpord_qp[ds]|vcmpordp[ds]|vcmpnge_usp[ds]|vcmpngep[ds]|vcmpngt_usp[ds]|vcmpngtp[ds]|vcmpfalse_oqp[ds]|vcmpfalsep[ds]|vcmpneq_oqp[ds]|vcmpge_osp[ds]|vcmpgep[ds]|vcmpgt_osp[ds]|vcmpgtp[ds]|vcmptrue_uqp[ds]|vcmptruep[ds]|vcmplt_oqp[ds]|vcmple_oqp[ds]|vcmpunord_sp[ds]|vcmpneq_usp[ds]|vcmpnl[et]_uqp[ds]|vcmpord_sp[ds]|vcmpeq_usp[ds]|vcmpng[et]_uqp[ds]|vcmpfalse_osp[ds]|vcmpneq_osp[ds]|vcmpg[et]_oqp[ds]|vcmptrue_usp[ds]|vcmpp[ds]|vcmpeq_oss[ds]|vcmpeqs[ds]|vcmpl[et]_oss[ds]|vcmpl[et]s[ds]|vcmpunord_qs[ds]|vcmpunords[ds]|vcmpneq_uqs[ds]|vcmpneqs[ds]|vcmpnl[et]_uss[ds]|vcmpnl[et]s[ds]|vcmpord_qs[ds]|vcmpords[ds]|vcmpeq_uqs[ds]|vcmpnge_uss[ds]|vcmpnges[ds]|vcmpngt_uss[ds]|vcmpngts[ds]|vcmpfalse_oqs[ds]|vcmpfalses[ds]|vcmpneq_oqs[ds]|vcmpge_oss[ds]|vcmpges[ds]|vcmpgt_oss[ds]|vcmpgts[ds]|vcmptrue_uqs[ds]|vcmptrues[ds]|vcmpl[et]_oqs[ds]|vcmpunord_ss[ds]|vcmpneq_uss[ds]|vcmpnl[et]_uqs[ds]|vcmpord_ss[ds]|vcmpeq_uss[ds]|vcmpng[et]_uqs[ds]|vcmpfalse_oss[ds]|vcmpneq_oss[ds]|vcmpg[et]_oqs[ds]|vcmptrue_uss[ds]|vcmps[ds]|vu?comis[ds]|vcvt(dq2(pd|ps)|pd2(dq|pi|ps)|pi2(pd|ps)|ps2(dq|pd|pi)|sd2(si|ss)|si2(sd|ss)|ss2(sd|si)|tpd2(dq|pi)|tps2(dq|pi)|ts[ds]2si)|vcvtph2ps|vcvtps2ph|vdiv[ps][ds]|vdpp[ds]|vextract[fi]128|vextractps|vhaddp[ds]|vhsubp[ds]|vinsert[fi]128|vinsertps|vld[dq]qu|vldmxcsr|vmaskmovdqu|vmaskmovp[ds]|vmax[ps][ds]|vmin[ps][ds]|vmovap[ds]|vmov[dq]|vmovddup|vmov[dq]q[au]|vmovhlps|vmovlhps|vmov[hl]p[sd]|vmovmskp[ds]|vmovnt[dq]q|vmovntdqa|vmovntp[ds]|vmovs[ds]|vmovs[hl]dup|vmovup[ds]|vmpsadbw|vmul[ps][ds]|vorp[ds]|vpabs[bwd]|vpack[su]s(dw|wb)|vpadd[bwdq]|vpaddu?s[bw]|vpalignr|vpandn?|vpavg[bw]|vpblendd|vpblendvb|vpblendw|vpbroadcast[bwdq]|vpclmulqdq|vpclmul[hl]q[hl]qdq|vpcmp[ei]str[im]|vpcmp(eq|gt)[bwdq]|vpermp?d|vpermps|vpermq|vperm2[fi]128|vpermilp[ds]|vpextr[bwdq]|vpgather[dq][dq]|vphadd[wd]|vphaddsw|vphminposuw|vphsub[wd]|vphsubsw|vpinsr[bwdq]|vpmaddwd|vpmaddubsw|vpm(ax|in)[su][bwd]|vpmaskmov[dq]|vpmovmskb|vpmov[sz]xb[wdq]|vpmov[sz]xw[dq]|vpmov[sz]xdq|vpmulhu?w|vpmulhrsw|vpmull[wd]|vpmulu?dq|vpor|vpsadbw|vpshuf[bd]|vpshuf[hl]w|vpsign[bwd]|vpsllv[dq]|vps[lr]ldq|vpsll[wdq]|vpsra[wd]|vpsravd|vpsrlv[dq]|vpsrl[wdq]|vptest|vpsub[bwdq]|vpsubu?s[bw]|vpunpck[hl](bw|wd|q?dq)|vpxor|vrcp[ps]s|vrsqrt[ps]s|vround[ps][ds]|vshufp[ds]|vsqrt[ps][ds]|vstmxcsr|vsub[ps][ds]|vtestp[ds]|vunpck[hl]p[ds]|vxorp[ds]|vzero(all|upper)|xgetbv|xrstors?(64)?|xsave(c|opt|s)?(64)?|xsetbv)(?=\\b)"
        "name": "keyword.avx"
    }
    {
        "match": "(?i)\\b(abs(olute)?|alignb?|as|at|bits|bnd|code|common|cpu|data|default|define|discardable|dynamic|else|end[ms]?|endstruc|entry|equ|even|executable|export|exte?rn|fix(ups)?|format|forward|globa?l|heap|iend|if|import|incbin|include|interpreter|irp[sv]?|istruc|linkinfo|linkremove|macro|match|nobnd|note|notpageable|org|plt|postpone|ptr|public|purge|rb|readable|rel|rept|resource|restore|restruc|reverse|rva|sectalign|section|seg|segment|shareable|stack|static|strict|struct?|times|union|use(16|32|64)|virtual|writeable|wrt)(?=\\b)"
        "name": "keyword"
    }
    {
        "match": "(?i)\\b(align|class|common|v?follows|group|overlay|private|public|stack|v?start)(?=\\b)"
        "name": "keyword.section-attribute"
    }
    {
        "match": "(?i)(?:\\s|=)(\\.?(?:l?bss|code|comment|[lr]?data|header|info|l?rodata|mixed|other|reloc|tbss|tdata|text))(?=\\b)"
        "captures":
            "1": "name": "support.type.section"
    }
    {
        "match": "(?i)\\b((r|d|res)[bwdqtoyz]|du)(?=\\b)"
        "name": "keyword"
    }
    {
        "match": "(?i)\\b(float\\s+((no)?daz|near|up|down|zero|default))(?=\\b)"
        "name": "keyword.settings"
    }
    {
        "match": "(?i)\\b(short|long|near|far)(?=\\b)"
        "captures":
            "1": "name": "entity.name.type"
    }
    {
        "match": "(?i)([,\\s])(byte|word|dword|qword)(?=\\b)"
        "captures":
            "2": "name": "entity.name.type"
    }
    {
        "match": "(^|\\b)([A-Za-z_][0-9A-Za-z_]*)(\\.)([0-9A-Za-z_]+)(\\b)"
        "captures":
            "4": "name": "entity.name.variable.identifier"
    }
    {
        "match": "\\b(__(utf(16|32)([lb]e)?|float(8|16|32|64|80[em]|128[hl]))__)\\b"
        "name": "support.type"
    }
    {
        "match": "\\b([\\+-]?0[bByY][01_]+\\.[01_]*([pP][\\+-]?[0-9_]+)?)(?=\\b)"
        "name": "constant.numeric.binary.bin.float"
    }
    {
        "match": "\\b([\\+-]?(0[dDtT])?[0-9_]+\\.[0-9_]*([eE][\\+-]?[0-9_]*)?)(?=\\b)"
        "name": "constant.numeric.decimal.dec.float"
    }
    {
        "match": "\\b([\\+-]?0[oOqQ][0-7_]+\\.[0-7_]*([pP][\\+-]?[0-9_]+)?)(?=\\b)"
        "name": "constant.numeric.octal.oct.float"
    }
    {
        "match": "(?:(?:(\\b0[hHxX][0-9A-Fa-f_]+)|(?:\\+|-|\\*|/|%|=|<|>|,|&|\\^|\\||:|~|\\(|\\[|\\s)(\\$0[0-9A-Fa-f_]+)))(\\.[0-9A-Fa-f_]*([eE][\\+-]?[0-9A-Fa-f_]*|[pP][\\+-]?[0-9]+))(?=\\b)"
        "captures":
            "1": "name": "constant.numeric.hexadecimal.hex.float"
            "2": "name": "constant.numeric.hexadecimal.hex.float"
            "3": "name": "constant.numeric.hexadecimal.hex.float"
    }
    {
        # According to the NASM documentation, all of the following are
        # equivalent: 11001000b, 1100_1000b, 1100_1000y, 0b1100_1000,
        # 0y1100_1000. This handles all of them. Upper/lower case both work.
        "match": "\\b([01_]+[bByY]|0[bByY][01_]+)(?=\\b)"
        "name": "constant.numeric.binary.bin"
    }
    {
        # According to the NASM documentation, all of the following are
        # equivalent: 310q, 310o, 0o310, 0q310. This handles all of them, also
        # allowing for underscores (which are also valid).
        "match": "\\b([0-7_]+[oOqQ]|0[oOqQ][0-7_]+)(?=\\b)"
        "name": "constant.numeric.octal.oct"
    }
    {
        # According to the NASM documentation, all of the following are
        # equivalent: 200, 0200, 0200d, 0d200.
        "match": "\\b([0-9_]+[dDtT]?|0[dDtT][0-9_]+)(?=\\b)"
        "name": "constant.numeric.decimal.dec"
    }
    {
        # According to the NASM documentation, all of the following are
        # equivalent: 0c8h, $0c8, 0xc8, 0hc8. The one containing `$` makes this
        # very awkward.
        "match": "(?:(\\b[0-9A-Fa-f_]+[hHxX])|(\\b0[hHxX][0-9A-Fa-f_]+)|(?:\\+|-|\\*|/|%|=|<|>|,|&|\\^|\\||:|~|\\(|\\[|\\s)(\\$0[0-9A-Fa-f_]+))(?=\\b)"
        "captures":
            "1": "name": "constant.numeric.hexadecimal.hex"
            "2": "name": "constant.numeric.hexadecimal.hex"
            "3": "name": "constant.numeric.hexadecimal.hex"
    }
    {
        "match": "\\b([A-Z_][0-9A-Z_]+|__(Infinity|[QS]?NaN)__)(?=\\b)"
        "captures":
            "1": "name": "constant.name"
    }
    {
        "match": "(?:(?:\\+|-|\\*|/|%|=|<|>|,|&|\\^|\\||:|~|\\(|\\[|\\s)(\\${1,2})(?=\\+|-|\\*|/|%|=|<|>|,|&|\\^|\\||:|~|\\)|\\]|\\s))"
        "captures":
            "1": "name": "keyword.punctuation"
    }
    {
        "match": "\\b(<<|>>|\\+|-|\\*|/|%|<=|>=|<|>)\\b"
        "name": "entity.operator"
    }
    {
        "begin": "\""
        "beginCaptures":
            "0": "name": "string.quoted.double.punctuation.definition.begin"
        "end": "\""
        "endCaptures":
            "0": "name": "string.quoted.double.punctuation.definition.end"
        "name": "string.quoted.double.punctuation.definition"
    }
    {
        "begin": "'"
        "beginCaptures":
            "0": "name": "string.quoted.single.punctuation.begin"
        "end": "'"
        "endCaptures":
            "0": "name": "string.quoted.single.punctuation.end"
        "name": "string.quoted.single.punctuation.definition"
    }
    {
        "begin": "`"
        "beginCaptures":
            "0": "name": "string.quoted.backtick.punctuation.begin"
        "end": "`"
        "endCaptures":
            "0": "name": "string.quoted.backtick.punctuation.end"
        "name": "string.quoted.backtick.punctuation.definition"
        "patterns": [
            {
                "include": "#escaped_characters"
            }
        ]
    }
]
"repository":
    "escaped_characters":
        {
            "match": "\\\\([\"'`\\\\?abtnvfre\\n\\r]|[0-8]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"
            "name": "constant.character.escape"
        }
